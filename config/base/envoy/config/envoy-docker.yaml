static_resources:
  listeners:
    - name: http
      address:
        socket_address: { address: 0.0.0.0, port_value: 9090 }
      filter_chains:
        - filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                '@type': type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
                access_log:
                  - name: envoy.file_access_log
                    config:
                      path: "/dev/stdout"
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: https
                      domains:
                        - "*"
                      routes:
                        - match: { prefix: '/mkit.service.account.user.v1.UserService' }
                          route: { cluster: account_service, max_grpc_timeout: 15.0s }
                        - match: { prefix: '/mkit.service.greeter.v1.GreeterService' }
                          route: { cluster: greeter_service, max_grpc_timeout: 15.0s }
                      cors:
                        allow_origin_string_match:
                          - safe_regex: { google_re2: {}, regex: '\*' }
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout,token,custom-header-1
                        max_age: '1728000'
                        expose_headers: custom-header-1,grpc-status,grpc-message
                http_filters:
                  - name: envoy.filters.http.grpc_web
                  - name: envoy.filters.http.cors
                  - name: envoy.filters.http.health_check
                    typed_config:
                      "@type": type.googleapis.com/envoy.config.filter.http.health_check.v2.HealthCheck
                      pass_through_mode: false
                      headers:
                        - name: ":path"
                          exact_match: "/healthz"
                        - name: "x-envoy-livenessprobe"
                          exact_match: "healthz"
                  - name: envoy.filters.http.router

    - name: https
      address:
        socket_address: { address: 0.0.0.0, port_value: 9443 }
      filter_chains:
        - transport_socket:
            name: envoy.transport_sockets.tls
            typed_config:
              "@type": type.googleapis.com/envoy.api.v2.auth.DownstreamTlsContext
              # require_client_certificate: true # uncomment if you want client to provide cert
              common_tls_context:
                tls_certificates:
                  - certificate_chain: { filename: '/etc/certs/proxy-cert.pem' }
                    private_key: { filename: '/etc/certs/proxy-key.pem' }
                validation_context:
                  trusted_ca: { filename: '/etc/certs/ca-cert.pem' }
          filters:
            - name: envoy.filters.network.http_connection_manager
              typed_config:
                '@type': type.googleapis.com/envoy.config.filter.network.http_connection_manager.v2.HttpConnectionManager
                access_log:
                  - name: envoy.file_access_log
                    config:
                      path: "/dev/stdout"
                codec_type: AUTO
                stat_prefix: ingress_http
                route_config:
                  name: local_route
                  virtual_hosts:
                    - name: https
                      domains:
                        - "*"
                      routes:
                        - match: { prefix: '/mkit.service.account.user.v1.UserService' }
                          route: { cluster: account_service, max_grpc_timeout: 15.0s }
                        - match: { prefix: '/mkit.service.greeter.v1.GreeterService' }
                          route: { cluster: greeter_service, max_grpc_timeout: 15.0s }
                      cors:
                        allow_origin_string_match:
                          - safe_regex: { google_re2: {}, regex: '\*' }
                        allow_methods: GET, PUT, DELETE, POST, OPTIONS
                        allow_headers: keep-alive,user-agent,cache-control,content-type,content-transfer-encoding,x-accept-content-transfer-encoding,x-accept-response-streaming,x-user-agent,x-grpc-web,grpc-timeout,token,custom-header-1
                        max_age: '1728000'
                        expose_headers: custom-header-1,grpc-status,grpc-message
                http_filters:
                  - name: envoy.filters.http.grpc_web
                  - name: envoy.filters.http.cors
                  - name: envoy.filters.http.health_check
                    typed_config:
                      "@type": type.googleapis.com/envoy.config.filter.http.health_check.v2.HealthCheck
                      pass_through_mode: false
                      headers:
                        - name: ":path"
                          exact_match: "/healthz"
                        - name: "x-envoy-livenessprobe"
                          exact_match: "healthz"
                  - name: envoy.filters.http.router  # has to be last

  clusters:
    - name: account_service
      connect_timeout: 0.5s
      type: STRICT_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: account_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: host.docker.internal, port_value: 8080 }
      health_checks:
        timeout: 1s
        interval: 10s
        unhealthy_threshold: 2
        healthy_threshold: 2
        grpc_health_check: {}
    - name: greeter_service
      connect_timeout: 0.5s
      type: STRICT_DNS
      dns_lookup_family: V4_ONLY
      lb_policy: ROUND_ROBIN
      http2_protocol_options: {}
      load_assignment:
        cluster_name: greeter_service
        endpoints:
          - lb_endpoints:
              - endpoint:
                  address:
                    socket_address: { address: host.docker.internal, port_value: 8081 }
      health_checks:
        timeout: 1s
        interval: 5s
        unhealthy_threshold: 2
        healthy_threshold: 2
        grpc_health_check: {}

admin:
  access_log_path: /dev/stdout
  address:
    socket_address: { address: 0.0.0.0, port_value: 9901 }

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0
// 	protoc        v3.12.3
// source: mkit/shared/config/v1/config.proto

package configv1

import (
	context "context"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type DatabaseDialect int32

const (
	DatabaseDialect_DATABASE_DIALECT_UNSPECIFIED DatabaseDialect = 0
	DatabaseDialect_DATABASE_DIALECT_POSTGRE     DatabaseDialect = 1
	DatabaseDialect_DATABASE_DIALECT_MY_SQL      DatabaseDialect = 2
	DatabaseDialect_DATABASE_DIALECT_SQ_LITE3    DatabaseDialect = 3
)

// Enum value maps for DatabaseDialect.
var (
	DatabaseDialect_name = map[int32]string{
		0: "DATABASE_DIALECT_UNSPECIFIED",
		1: "DATABASE_DIALECT_POSTGRE",
		2: "DATABASE_DIALECT_MY_SQL",
		3: "DATABASE_DIALECT_SQ_LITE3",
	}
	DatabaseDialect_value = map[string]int32{
		"DATABASE_DIALECT_UNSPECIFIED": 0,
		"DATABASE_DIALECT_POSTGRE":     1,
		"DATABASE_DIALECT_MY_SQL":      2,
		"DATABASE_DIALECT_SQ_LITE3":    3,
	}
)

func (x DatabaseDialect) Enum() *DatabaseDialect {
	p := new(DatabaseDialect)
	*p = x
	return p
}

func (x DatabaseDialect) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (DatabaseDialect) Descriptor() protoreflect.EnumDescriptor {
	return file_mkit_shared_config_v1_config_proto_enumTypes[0].Descriptor()
}

func (DatabaseDialect) Type() protoreflect.EnumType {
	return &file_mkit_shared_config_v1_config_proto_enumTypes[0]
}

func (x DatabaseDialect) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use DatabaseDialect.Descriptor instead.
func (DatabaseDialect) EnumDescriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{0}
}

type Service struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Endpoint      string            `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty"`
	Version       string            `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty"`
	Metadata      map[string]string `protobuf:"bytes,3,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	ServiceConfig string            `protobuf:"bytes,4,opt,name=service_config,json=serviceConfig,proto3" json:"service_config,omitempty"`
	Authority     string            `protobuf:"bytes,5,opt,name=authority,proto3" json:"authority,omitempty"`
}

func (x *Service) Reset() {
	*x = Service{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Service) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Service) ProtoMessage() {}

func (x *Service) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Service.ProtoReflect.Descriptor instead.
func (*Service) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{0}
}

func (x *Service) GetEndpoint() string {
	if x != nil {
		return x.Endpoint
	}
	return ""
}

func (x *Service) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *Service) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *Service) GetServiceConfig() string {
	if x != nil {
		return x.ServiceConfig
	}
	return ""
}

func (x *Service) GetAuthority() string {
	if x != nil {
		return x.Authority
	}
	return ""
}

type EmailConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Username    string `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty"`
	Password    string `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	EmailServer string `protobuf:"bytes,3,opt,name=email_server,json=emailServer,proto3" json:"email_server,omitempty"`
	Port        uint32 `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty"`
	From        string `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty"`
}

func (x *EmailConfiguration) Reset() {
	*x = EmailConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EmailConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EmailConfiguration) ProtoMessage() {}

func (x *EmailConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EmailConfiguration.ProtoReflect.Descriptor instead.
func (*EmailConfiguration) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{1}
}

func (x *EmailConfiguration) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *EmailConfiguration) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *EmailConfiguration) GetEmailServer() string {
	if x != nil {
		return x.EmailServer
	}
	return ""
}

func (x *EmailConfiguration) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *EmailConfiguration) GetFrom() string {
	if x != nil {
		return x.From
	}
	return ""
}

type DatabaseConfiguration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Dialect         DatabaseDialect    `protobuf:"varint,1,opt,name=dialect,proto3,enum=mkit.shared.config.v1.DatabaseDialect" json:"dialect,omitempty"`
	Host            string             `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty"`
	Port            uint32             `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty"`
	Username        string             `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty"`
	Password        string             `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	Database        string             `protobuf:"bytes,6,opt,name=database,proto3" json:"database,omitempty"`
	Charset         string             `protobuf:"bytes,7,opt,name=charset,proto3" json:"charset,omitempty"`
	Utc             bool               `protobuf:"varint,8,opt,name=utc,proto3" json:"utc,omitempty"`
	Logging         bool               `protobuf:"varint,9,opt,name=logging,proto3" json:"logging,omitempty"`
	Singularize     bool               `protobuf:"varint,10,opt,name=singularize,proto3" json:"singularize,omitempty"`
	MaxOpenConns    uint32             `protobuf:"varint,11,opt,name=max_open_conns,json=maxOpenConns,proto3" json:"max_open_conns,omitempty"`
	MaxIdleConns    uint32             `protobuf:"varint,12,opt,name=max_idle_conns,json=maxIdleConns,proto3" json:"max_idle_conns,omitempty"`
	ConnMaxLifetime *duration.Duration `protobuf:"bytes,13,opt,name=conn_max_lifetime,json=connMaxLifetime,proto3" json:"conn_max_lifetime,omitempty"`
}

func (x *DatabaseConfiguration) Reset() {
	*x = DatabaseConfiguration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DatabaseConfiguration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DatabaseConfiguration) ProtoMessage() {}

func (x *DatabaseConfiguration) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DatabaseConfiguration.ProtoReflect.Descriptor instead.
func (*DatabaseConfiguration) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{2}
}

func (x *DatabaseConfiguration) GetDialect() DatabaseDialect {
	if x != nil {
		return x.Dialect
	}
	return DatabaseDialect_DATABASE_DIALECT_UNSPECIFIED
}

func (x *DatabaseConfiguration) GetHost() string {
	if x != nil {
		return x.Host
	}
	return ""
}

func (x *DatabaseConfiguration) GetPort() uint32 {
	if x != nil {
		return x.Port
	}
	return 0
}

func (x *DatabaseConfiguration) GetUsername() string {
	if x != nil {
		return x.Username
	}
	return ""
}

func (x *DatabaseConfiguration) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *DatabaseConfiguration) GetDatabase() string {
	if x != nil {
		return x.Database
	}
	return ""
}

func (x *DatabaseConfiguration) GetCharset() string {
	if x != nil {
		return x.Charset
	}
	return ""
}

func (x *DatabaseConfiguration) GetUtc() bool {
	if x != nil {
		return x.Utc
	}
	return false
}

func (x *DatabaseConfiguration) GetLogging() bool {
	if x != nil {
		return x.Logging
	}
	return false
}

func (x *DatabaseConfiguration) GetSingularize() bool {
	if x != nil {
		return x.Singularize
	}
	return false
}

func (x *DatabaseConfiguration) GetMaxOpenConns() uint32 {
	if x != nil {
		return x.MaxOpenConns
	}
	return 0
}

func (x *DatabaseConfiguration) GetMaxIdleConns() uint32 {
	if x != nil {
		return x.MaxIdleConns
	}
	return 0
}

func (x *DatabaseConfiguration) GetConnMaxLifetime() *duration.Duration {
	if x != nil {
		return x.ConnMaxLifetime
	}
	return nil
}

type Features struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Metrics   *Features_Metrics   `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Tracing   *Features_Tracing   `protobuf:"bytes,2,opt,name=tracing,proto3" json:"tracing,omitempty"`
	Tls       *Features_TLS       `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	Validator *Features_Validator `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`
	Rpclog    *Features_Rpclog    `protobuf:"bytes,5,opt,name=rpclog,proto3" json:"rpclog,omitempty"`
	Translog  *Features_Translog  `protobuf:"bytes,6,opt,name=translog,proto3" json:"translog,omitempty"`
}

func (x *Features) Reset() {
	*x = Features{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features) ProtoMessage() {}

func (x *Features) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features.ProtoReflect.Descriptor instead.
func (*Features) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{3}
}

func (x *Features) GetMetrics() *Features_Metrics {
	if x != nil {
		return x.Metrics
	}
	return nil
}

func (x *Features) GetTracing() *Features_Tracing {
	if x != nil {
		return x.Tracing
	}
	return nil
}

func (x *Features) GetTls() *Features_TLS {
	if x != nil {
		return x.Tls
	}
	return nil
}

func (x *Features) GetValidator() *Features_Validator {
	if x != nil {
		return x.Validator
	}
	return nil
}

func (x *Features) GetRpclog() *Features_Rpclog {
	if x != nil {
		return x.Rpclog
	}
	return nil
}

func (x *Features) GetTranslog() *Features_Translog {
	if x != nil {
		return x.Translog
	}
	return nil
}

type Services struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Account  *Service `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Greeter  *Service `protobuf:"bytes,2,opt,name=greeter,proto3" json:"greeter,omitempty"`
	Emailer  *Service `protobuf:"bytes,3,opt,name=emailer,proto3" json:"emailer,omitempty"`
	Recorder *Service `protobuf:"bytes,4,opt,name=recorder,proto3" json:"recorder,omitempty"`
	Play     *Service `protobuf:"bytes,5,opt,name=play,proto3" json:"play,omitempty"`
}

func (x *Services) Reset() {
	*x = Services{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Services) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Services) ProtoMessage() {}

func (x *Services) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Services.ProtoReflect.Descriptor instead.
func (*Services) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{4}
}

func (x *Services) GetAccount() *Service {
	if x != nil {
		return x.Account
	}
	return nil
}

func (x *Services) GetGreeter() *Service {
	if x != nil {
		return x.Greeter
	}
	return nil
}

func (x *Services) GetEmailer() *Service {
	if x != nil {
		return x.Emailer
	}
	return nil
}

func (x *Services) GetRecorder() *Service {
	if x != nil {
		return x.Recorder
	}
	return nil
}

func (x *Services) GetPlay() *Service {
	if x != nil {
		return x.Play
	}
	return nil
}

type Configuration struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Database *DatabaseConfiguration `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Email    *EmailConfiguration    `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Features *Features              `protobuf:"bytes,5,opt,name=features,proto3" json:"features,omitempty"`
	Services *Services              `protobuf:"bytes,6,opt,name=services,proto3" json:"services,omitempty"`
}

func (x *Configuration) Reset() {
	*x = Configuration{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Configuration) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Configuration) ProtoMessage() {}

func (x *Configuration) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Configuration.ProtoReflect.Descriptor instead.
func (*Configuration) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{5}
}

func (x *Configuration) GetDatabase() *DatabaseConfiguration {
	if x != nil {
		return x.Database
	}
	return nil
}

func (x *Configuration) GetEmail() *EmailConfiguration {
	if x != nil {
		return x.Email
	}
	return nil
}

func (x *Configuration) GetFeatures() *Features {
	if x != nil {
		return x.Features
	}
	return nil
}

func (x *Configuration) GetServices() *Services {
	if x != nil {
		return x.Services
	}
	return nil
}

type Features_Metrics struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled       bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Address       string `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	FlushInterval uint64 `protobuf:"varint,3,opt,name=flush_interval,json=flushInterval,proto3" json:"flush_interval,omitempty"`
}

func (x *Features_Metrics) Reset() {
	*x = Features_Metrics{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features_Metrics) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features_Metrics) ProtoMessage() {}

func (x *Features_Metrics) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features_Metrics.ProtoReflect.Descriptor instead.
func (*Features_Metrics) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{3, 0}
}

func (x *Features_Metrics) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Features_Metrics) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Features_Metrics) GetFlushInterval() uint64 {
	if x != nil {
		return x.FlushInterval
	}
	return 0
}

type Features_Tracing struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled       bool    `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Address       string  `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	Sampling      float64 `protobuf:"fixed64,3,opt,name=sampling,proto3" json:"sampling,omitempty"`
	FlushInterval uint64  `protobuf:"varint,4,opt,name=flush_interval,json=flushInterval,proto3" json:"flush_interval,omitempty"`
}

func (x *Features_Tracing) Reset() {
	*x = Features_Tracing{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features_Tracing) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features_Tracing) ProtoMessage() {}

func (x *Features_Tracing) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features_Tracing.ProtoReflect.Descriptor instead.
func (*Features_Tracing) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{3, 1}
}

func (x *Features_Tracing) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Features_Tracing) GetAddress() string {
	if x != nil {
		return x.Address
	}
	return ""
}

func (x *Features_Tracing) GetSampling() float64 {
	if x != nil {
		return x.Sampling
	}
	return 0
}

func (x *Features_Tracing) GetFlushInterval() uint64 {
	if x != nil {
		return x.FlushInterval
	}
	return 0
}

type Features_TLS struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled    bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	CertFile   string `protobuf:"bytes,2,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty"`
	KeyFile    string `protobuf:"bytes,3,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty"`
	CaFile     string `protobuf:"bytes,4,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty"`
	Password   string `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty"`
	ServerName string `protobuf:"bytes,6,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
}

func (x *Features_TLS) Reset() {
	*x = Features_TLS{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features_TLS) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features_TLS) ProtoMessage() {}

func (x *Features_TLS) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features_TLS.ProtoReflect.Descriptor instead.
func (*Features_TLS) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{3, 2}
}

func (x *Features_TLS) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Features_TLS) GetCertFile() string {
	if x != nil {
		return x.CertFile
	}
	return ""
}

func (x *Features_TLS) GetKeyFile() string {
	if x != nil {
		return x.KeyFile
	}
	return ""
}

func (x *Features_TLS) GetCaFile() string {
	if x != nil {
		return x.CaFile
	}
	return ""
}

func (x *Features_TLS) GetPassword() string {
	if x != nil {
		return x.Password
	}
	return ""
}

func (x *Features_TLS) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

type Features_Validator struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Features_Validator) Reset() {
	*x = Features_Validator{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features_Validator) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features_Validator) ProtoMessage() {}

func (x *Features_Validator) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features_Validator.ProtoReflect.Descriptor instead.
func (*Features_Validator) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{3, 3}
}

func (x *Features_Validator) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Features_Rpclog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
}

func (x *Features_Rpclog) Reset() {
	*x = Features_Rpclog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features_Rpclog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features_Rpclog) ProtoMessage() {}

func (x *Features_Rpclog) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features_Rpclog.ProtoReflect.Descriptor instead.
func (*Features_Rpclog) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{3, 4}
}

func (x *Features_Rpclog) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

type Features_Translog struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Enabled bool   `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty"`
	Topic   string `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
}

func (x *Features_Translog) Reset() {
	*x = Features_Translog{}
	if protoimpl.UnsafeEnabled {
		mi := &file_mkit_shared_config_v1_config_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Features_Translog) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Features_Translog) ProtoMessage() {}

func (x *Features_Translog) ProtoReflect() protoreflect.Message {
	mi := &file_mkit_shared_config_v1_config_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Features_Translog.ProtoReflect.Descriptor instead.
func (*Features_Translog) Descriptor() ([]byte, []int) {
	return file_mkit_shared_config_v1_config_proto_rawDescGZIP(), []int{3, 5}
}

func (x *Features_Translog) GetEnabled() bool {
	if x != nil {
		return x.Enabled
	}
	return false
}

func (x *Features_Translog) GetTopic() string {
	if x != nil {
		return x.Topic
	}
	return ""
}

var File_mkit_shared_config_v1_config_proto protoreflect.FileDescriptor

var file_mkit_shared_config_v1_config_proto_rawDesc = []byte{
	0x0a, 0x22, 0x6d, 0x6b, 0x69, 0x74, 0x2f, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65,
	0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x1a, 0x14, 0x67, 0x6f, 0x67,
	0x6f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x67, 0x6f, 0x67, 0x6f, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x17,
	0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb3, 0x03, 0x0a, 0x07, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x3f, 0x0a, 0x08, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xf2, 0xde, 0x1f, 0x1f, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x65, 0x6e, 0x64, 0x70, 0x6f, 0x69, 0x6e, 0x74, 0x22, 0x20, 0x72, 0x65, 0x71, 0x75, 0x69,
	0x72, 0x65, 0x64, 0x3a, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x52, 0x08, 0x65, 0x6e, 0x64, 0x70,
	0x6f, 0x69, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x26, 0xf2, 0xde, 0x1f, 0x22, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x76, 0x30, 0x2e, 0x31, 0x2e, 0x30, 0x22, 0x52, 0x07, 0x76,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x67, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61,
	0x74, 0x61, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74,
	0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x6d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12,
	0x4a, 0x0a, 0x0e, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x23, 0xf2, 0xde, 0x1f, 0x1f, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x0d, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x33, 0x0a, 0x09, 0x61,
	0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x15,
	0xf2, 0xde, 0x1f, 0x11, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65,
	0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x09, 0x61, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79,
	0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72,
	0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0x93, 0x02,
	0x0a, 0x12, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x13, 0xf2, 0xde, 0x1f, 0x0f, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65,
	0x72, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x12, 0x3a, 0x0a, 0x0c, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x17, 0xf2, 0xde, 0x1f, 0x13, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x5f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22,
	0x52, 0x0b, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x44, 0x0a,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x30, 0xf2, 0xde, 0x1f,
	0x2c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x35, 0x38, 0x37, 0x22,
	0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x52, 0x04, 0x70,
	0x6f, 0x72, 0x74, 0x12, 0x2e, 0x0a, 0x04, 0x66, 0x72, 0x6f, 0x6d, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x1a, 0xf2, 0xde, 0x1f, 0x16, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x22, 0x65, 0x6d,
	0x61, 0x69, 0x6c, 0x2c, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x61, 0x6c, 0x22, 0x52, 0x04, 0x66,
	0x72, 0x6f, 0x6d, 0x22, 0x84, 0x08, 0x0a, 0x15, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x86, 0x01,
	0x0a, 0x07, 0x64, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x26, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x44, 0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x42, 0x44, 0xf2, 0xde, 0x1f, 0x40, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x76,
	0x61, 0x6c, 0x69, 0x64, 0x3a, 0x22, 0x69, 0x6e, 0x28, 0x50, 0x6f, 0x73, 0x74, 0x67, 0x72, 0x65,
	0x73, 0x7c, 0x4d, 0x79, 0x53, 0x51, 0x4c, 0x7c, 0x53, 0x51, 0x4c, 0x69, 0x74, 0x65, 0x33, 0x29,
	0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x32, 0x22, 0x52, 0x07, 0x64,
	0x69, 0x61, 0x6c, 0x65, 0x63, 0x74, 0x12, 0x36, 0x0a, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x22, 0xf2, 0xde, 0x1f, 0x1e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69,
	0x64, 0x3a, 0x22, 0x68, 0x6f, 0x73, 0x74, 0x22, 0x52, 0x04, 0x68, 0x6f, 0x73, 0x74, 0x12, 0x45,
	0x0a, 0x04, 0x70, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x31, 0xf2, 0xde,
	0x1f, 0x2d, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70,
	0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x35, 0x34, 0x33,
	0x32, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x22, 0x70, 0x6f, 0x72, 0x74, 0x22, 0x52,
	0x04, 0x70, 0x6f, 0x72, 0x74, 0x12, 0x39, 0x0a, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x76, 0x61, 0x6c,
	0x69, 0x64, 0x3a, 0x22, 0x61, 0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x2c, 0x72, 0x65, 0x71,
	0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x08, 0x75, 0x73, 0x65, 0x72, 0x6e, 0x61, 0x6d, 0x65,
	0x12, 0x39, 0x0a, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x22, 0x61,
	0x6c, 0x70, 0x68, 0x61, 0x6e, 0x75, 0x6d, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64,
	0x22, 0x52, 0x08, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x3d, 0x0a, 0x08, 0x64,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x21, 0xf2,
	0xde, 0x1f, 0x1d, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22,
	0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3e, 0x0a, 0x07, 0x63, 0x68,
	0x61, 0x72, 0x73, 0x65, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x24, 0xf2, 0xde, 0x1f,
	0x20, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74,
	0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x75, 0x74, 0x66, 0x38,
	0x22, 0x52, 0x07, 0x63, 0x68, 0x61, 0x72, 0x73, 0x65, 0x74, 0x12, 0x36, 0x0a, 0x03, 0x75, 0x74,
	0x63, 0x18, 0x08, 0x20, 0x01, 0x28, 0x08, 0x42, 0x24, 0xf2, 0xde, 0x1f, 0x20, 0x79, 0x61, 0x6d,
	0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x74, 0x72, 0x75, 0x65, 0x22, 0x52, 0x03, 0x75,
	0x74, 0x63, 0x12, 0x3f, 0x0a, 0x07, 0x6c, 0x6f, 0x67, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x08, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c,
	0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x3a, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x52, 0x07, 0x6c, 0x6f, 0x67, 0x67,
	0x69, 0x6e, 0x67, 0x12, 0x47, 0x0a, 0x0b, 0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69,
	0x7a, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x79, 0x61,
	0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20,
	0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x52,
	0x0b, 0x73, 0x69, 0x6e, 0x67, 0x75, 0x6c, 0x61, 0x72, 0x69, 0x7a, 0x65, 0x12, 0x55, 0x0a, 0x0e,
	0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0xf2, 0xde, 0x1f, 0x2b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x6d, 0x61, 0x78, 0x5f, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x3a, 0x22, 0x31, 0x22, 0x52, 0x0c, 0x6d, 0x61, 0x78, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x6e, 0x6e, 0x73, 0x12, 0x55, 0x0a, 0x0e, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x42, 0x2f, 0xf2, 0xde, 0x1f,
	0x2b, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x6d, 0x61, 0x78, 0x5f, 0x69, 0x64, 0x6c, 0x65, 0x5f,
	0x63, 0x6f, 0x6e, 0x6e, 0x73, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22,
	0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x31, 0x22, 0x52, 0x0c, 0x6d, 0x61,
	0x78, 0x49, 0x64, 0x6c, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x73, 0x12, 0x7e, 0x0a, 0x11, 0x63, 0x6f,
	0x6e, 0x6e, 0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x42, 0x37, 0xf2, 0xde, 0x1f, 0x2f, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x6f, 0x6e, 0x6e,
	0x5f, 0x6d, 0x61, 0x78, 0x5f, 0x6c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x22, 0x31, 0x68, 0x22, 0x98, 0xdf, 0x1f, 0x01, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x6e, 0x4d,
	0x61, 0x78, 0x4c, 0x69, 0x66, 0x65, 0x74, 0x69, 0x6d, 0x65, 0x22, 0xa6, 0x0c, 0x0a, 0x08, 0x46,
	0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69,
	0x63, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31,
	0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63,
	0x73, 0x52, 0x07, 0x6d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12, 0x41, 0x0a, 0x07, 0x74, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x6d, 0x6b,
	0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x54, 0x72, 0x61,
	0x63, 0x69, 0x6e, 0x67, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x35, 0x0a,
	0x03, 0x74, 0x6c, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x6d, 0x6b, 0x69,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x54, 0x4c, 0x53, 0x52,
	0x03, 0x74, 0x6c, 0x73, 0x12, 0x47, 0x0a, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f,
	0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73,
	0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e,
	0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x56, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74,
	0x6f, 0x72, 0x52, 0x09, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x6f, 0x72, 0x12, 0x3e, 0x0a,
	0x06, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e,
	0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x2e, 0x52,
	0x70, 0x63, 0x6c, 0x6f, 0x67, 0x52, 0x06, 0x72, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x12, 0x44, 0x0a,
	0x08, 0x74, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x6f, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x28, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73,
	0x2e, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x6f, 0x67, 0x52, 0x08, 0x74, 0x72, 0x61, 0x6e, 0x73,
	0x6c, 0x6f, 0x67, 0x1a, 0xc3, 0x01, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x72, 0x69, 0x63, 0x73, 0x12,
	0x3f, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x5d, 0x0a, 0x0e, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x42, 0x36, 0xf2, 0xde, 0x1f, 0x32, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x66, 0x6c,
	0x75, 0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x22, 0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x52, 0x0d, 0x66, 0x6c, 0x75, 0x73,
	0x68, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0x8c, 0x02, 0x0a, 0x07, 0x54, 0x72,
	0x61, 0x63, 0x69, 0x6e, 0x67, 0x12, 0x3f, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x79, 0x61, 0x6d, 0x6c,
	0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x52, 0x07, 0x65,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73,
	0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73,
	0x12, 0x47, 0x0a, 0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x01, 0x42, 0x2b, 0xf2, 0xde, 0x1f, 0x27, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x61,
	0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x30, 0x2e, 0x35, 0x22, 0x52,
	0x08, 0x73, 0x61, 0x6d, 0x70, 0x6c, 0x69, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x0e, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x04, 0x42, 0x36, 0xf2, 0xde, 0x1f, 0x32, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x66, 0x6c, 0x75,
	0x73, 0x68, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2c, 0x6f, 0x6d, 0x69, 0x74,
	0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22,
	0x31, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x30, 0x22, 0x52, 0x0d, 0x66, 0x6c, 0x75, 0x73, 0x68,
	0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x1a, 0xbc, 0x03, 0x0a, 0x03, 0x54, 0x4c, 0x53,
	0x12, 0x3f, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x08, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d,
	0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x3a, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x64, 0x12, 0x4f, 0x0a, 0x09, 0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x32, 0xf2, 0xde, 0x1f, 0x2e, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x63, 0x65, 0x72, 0x74, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64,
	0x3a, 0x22, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x2c, 0x72,
	0x65, 0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x08, 0x63, 0x65, 0x72, 0x74, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x4c, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x09, 0x42, 0x31, 0xf2, 0xde, 0x1f, 0x2d, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22,
	0x6b, 0x65, 0x79, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a,
	0x22, 0x74, 0x79, 0x70, 0x65, 0x28, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x2c, 0x72, 0x65,
	0x71, 0x75, 0x69, 0x72, 0x65, 0x64, 0x22, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x46, 0x69, 0x6c, 0x65,
	0x12, 0x49, 0x0a, 0x07, 0x63, 0x61, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x09, 0x42, 0x30, 0xf2, 0xde, 0x1f, 0x2c, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x63, 0x61, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x22, 0x20, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x3a, 0x22, 0x74, 0x79, 0x70,
	0x65, 0x28, 0x73, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x29, 0x2c, 0x72, 0x65, 0x71, 0x75, 0x69, 0x72,
	0x65, 0x64, 0x22, 0x52, 0x06, 0x63, 0x61, 0x46, 0x69, 0x6c, 0x65, 0x12, 0x39, 0x0a, 0x08, 0x70,
	0x61, 0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x42, 0x1d, 0xf2,
	0xde, 0x1f, 0x19, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x61, 0x73, 0x73, 0x77, 0x6f, 0x72,
	0x64, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x70, 0x61,
	0x73, 0x73, 0x77, 0x6f, 0x72, 0x64, 0x12, 0x4f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xf2, 0xde, 0x1f,
	0x2a, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x27, 0x2a, 0x27, 0x22, 0x52, 0x0a, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x1a, 0x4c, 0x0a, 0x09, 0x56, 0x61, 0x6c, 0x69, 0x64,
	0x61, 0x74, 0x6f, 0x72, 0x12, 0x3f, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x79, 0x61, 0x6d, 0x6c, 0x3a,
	0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x52, 0x07, 0x65, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x64, 0x1a, 0x49, 0x0a, 0x06, 0x52, 0x70, 0x63, 0x6c, 0x6f, 0x67, 0x12,
	0x3f, 0x0a, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08,
	0x42, 0x25, 0xf2, 0xde, 0x1f, 0x21, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a,
	0x22, 0x66, 0x61, 0x6c, 0x73, 0x65, 0x22, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64,
	0x1a, 0x61, 0x0a, 0x08, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x6c, 0x6f, 0x67, 0x12, 0x3f, 0x0a, 0x07,
	0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x42, 0x25, 0xf2,
	0xde, 0x1f, 0x21, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d,
	0x70, 0x74, 0x79, 0x22, 0x20, 0x64, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x3a, 0x22, 0x66, 0x61,
	0x6c, 0x73, 0x65, 0x22, 0x52, 0x07, 0x65, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x74, 0x6f, 0x70, 0x69, 0x63, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x6f,
	0x70, 0x69, 0x63, 0x22, 0xbc, 0x03, 0x0a, 0x08, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73,
	0x12, 0x56, 0x0a, 0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x61, 0x63, 0x63,
	0x6f, 0x75, 0x6e, 0x74, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x07, 0x61, 0x63, 0x63, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x56, 0x0a, 0x07, 0x67, 0x72, 0x65, 0x65,
	0x74, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6b, 0x69, 0x74,
	0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76,
	0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x79,
	0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x67, 0x72, 0x65, 0x65, 0x74, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69,
	0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x07, 0x67, 0x72, 0x65, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x56, 0x0a, 0x07, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x1c, 0xf2, 0xde, 0x1f, 0x18, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x65, 0x6d, 0x61,
	0x69, 0x6c, 0x65, 0x72, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52,
	0x07, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x65, 0x72, 0x12, 0x59, 0x0a, 0x08, 0x72, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6b, 0x69,
	0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e,
	0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x42, 0x1d, 0xf2, 0xde, 0x1f, 0x19,
	0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x65, 0x72, 0x2c, 0x6f,
	0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x08, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x12, 0x4d, 0x0a, 0x04, 0x70, 0x6c, 0x61, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1e, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x42, 0x19, 0xf2, 0xde, 0x1f, 0x15, 0x79, 0x61, 0x6d, 0x6c, 0x3a, 0x22, 0x70, 0x6c, 0x61,
	0x79, 0x2c, 0x6f, 0x6d, 0x69, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x22, 0x52, 0x04, 0x70, 0x6c,
	0x61, 0x79, 0x22, 0x99, 0x02, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68,
	0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x44,
	0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x52, 0x08, 0x64, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x12, 0x3f,
	0x0a, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e,
	0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x45, 0x6d, 0x61, 0x69, 0x6c, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x05, 0x65, 0x6d, 0x61, 0x69, 0x6c, 0x12,
	0x3b, 0x0a, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1f, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x46, 0x65, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x73, 0x52, 0x08, 0x66, 0x65, 0x61, 0x74, 0x75, 0x72, 0x65, 0x73, 0x12, 0x3b, 0x0a, 0x08,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x52,
	0x08, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x73, 0x3a, 0x03, 0xf8, 0x42, 0x01, 0x2a, 0x8d,
	0x01, 0x0a, 0x0f, 0x44, 0x61, 0x74, 0x61, 0x62, 0x61, 0x73, 0x65, 0x44, 0x69, 0x61, 0x6c, 0x65,
	0x63, 0x74, 0x12, 0x20, 0x0a, 0x1c, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44,
	0x49, 0x41, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x55, 0x4e, 0x53, 0x50, 0x45, 0x43, 0x49, 0x46, 0x49,
	0x45, 0x44, 0x10, 0x00, 0x12, 0x1c, 0x0a, 0x18, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45,
	0x5f, 0x44, 0x49, 0x41, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x50, 0x4f, 0x53, 0x54, 0x47, 0x52, 0x45,
	0x10, 0x01, 0x12, 0x1b, 0x0a, 0x17, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44,
	0x49, 0x41, 0x4c, 0x45, 0x43, 0x54, 0x5f, 0x4d, 0x59, 0x5f, 0x53, 0x51, 0x4c, 0x10, 0x02, 0x12,
	0x1d, 0x0a, 0x19, 0x44, 0x41, 0x54, 0x41, 0x42, 0x41, 0x53, 0x45, 0x5f, 0x44, 0x49, 0x41, 0x4c,
	0x45, 0x43, 0x54, 0x5f, 0x53, 0x51, 0x5f, 0x4c, 0x49, 0x54, 0x45, 0x33, 0x10, 0x03, 0x32, 0x99,
	0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x12, 0x43, 0x0a, 0x03, 0x47, 0x65, 0x74, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a,
	0x24, 0x2e, 0x6d, 0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x43, 0x0a, 0x03, 0x53, 0x65, 0x74, 0x12, 0x24, 0x2e, 0x6d,
	0x6b, 0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x75, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x42, 0x5d, 0x0a, 0x15, 0x6d, 0x6b,
	0x69, 0x74, 0x2e, 0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x2e, 0x76, 0x31, 0x50, 0x01, 0x5a, 0x42, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x78, 0x6d, 0x6c, 0x6b, 0x69, 0x6e, 0x67, 0x2f, 0x67, 0x72, 0x70, 0x63, 0x2d, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x65, 0x72, 0x2d, 0x6b, 0x69, 0x74, 0x2f, 0x6d, 0x6b, 0x69, 0x74, 0x2f,
	0x73, 0x68, 0x61, 0x72, 0x65, 0x64, 0x2f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2f, 0x76, 0x31,
	0x3b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_mkit_shared_config_v1_config_proto_rawDescOnce sync.Once
	file_mkit_shared_config_v1_config_proto_rawDescData = file_mkit_shared_config_v1_config_proto_rawDesc
)

func file_mkit_shared_config_v1_config_proto_rawDescGZIP() []byte {
	file_mkit_shared_config_v1_config_proto_rawDescOnce.Do(func() {
		file_mkit_shared_config_v1_config_proto_rawDescData = protoimpl.X.CompressGZIP(file_mkit_shared_config_v1_config_proto_rawDescData)
	})
	return file_mkit_shared_config_v1_config_proto_rawDescData
}

var file_mkit_shared_config_v1_config_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_mkit_shared_config_v1_config_proto_msgTypes = make([]protoimpl.MessageInfo, 13)
var file_mkit_shared_config_v1_config_proto_goTypes = []interface{}{
	(DatabaseDialect)(0),          // 0: mkit.shared.config.v1.DatabaseDialect
	(*Service)(nil),               // 1: mkit.shared.config.v1.Service
	(*EmailConfiguration)(nil),    // 2: mkit.shared.config.v1.EmailConfiguration
	(*DatabaseConfiguration)(nil), // 3: mkit.shared.config.v1.DatabaseConfiguration
	(*Features)(nil),              // 4: mkit.shared.config.v1.Features
	(*Services)(nil),              // 5: mkit.shared.config.v1.Services
	(*Configuration)(nil),         // 6: mkit.shared.config.v1.Configuration
	nil,                           // 7: mkit.shared.config.v1.Service.MetadataEntry
	(*Features_Metrics)(nil),      // 8: mkit.shared.config.v1.Features.Metrics
	(*Features_Tracing)(nil),      // 9: mkit.shared.config.v1.Features.Tracing
	(*Features_TLS)(nil),          // 10: mkit.shared.config.v1.Features.TLS
	(*Features_Validator)(nil),    // 11: mkit.shared.config.v1.Features.Validator
	(*Features_Rpclog)(nil),       // 12: mkit.shared.config.v1.Features.Rpclog
	(*Features_Translog)(nil),     // 13: mkit.shared.config.v1.Features.Translog
	(*duration.Duration)(nil),     // 14: google.protobuf.Duration
	(*empty.Empty)(nil),           // 15: google.protobuf.Empty
}
var file_mkit_shared_config_v1_config_proto_depIdxs = []int32{
	7,  // 0: mkit.shared.config.v1.Service.metadata:type_name -> mkit.shared.config.v1.Service.MetadataEntry
	0,  // 1: mkit.shared.config.v1.DatabaseConfiguration.dialect:type_name -> mkit.shared.config.v1.DatabaseDialect
	14, // 2: mkit.shared.config.v1.DatabaseConfiguration.conn_max_lifetime:type_name -> google.protobuf.Duration
	8,  // 3: mkit.shared.config.v1.Features.metrics:type_name -> mkit.shared.config.v1.Features.Metrics
	9,  // 4: mkit.shared.config.v1.Features.tracing:type_name -> mkit.shared.config.v1.Features.Tracing
	10, // 5: mkit.shared.config.v1.Features.tls:type_name -> mkit.shared.config.v1.Features.TLS
	11, // 6: mkit.shared.config.v1.Features.validator:type_name -> mkit.shared.config.v1.Features.Validator
	12, // 7: mkit.shared.config.v1.Features.rpclog:type_name -> mkit.shared.config.v1.Features.Rpclog
	13, // 8: mkit.shared.config.v1.Features.translog:type_name -> mkit.shared.config.v1.Features.Translog
	1,  // 9: mkit.shared.config.v1.Services.account:type_name -> mkit.shared.config.v1.Service
	1,  // 10: mkit.shared.config.v1.Services.greeter:type_name -> mkit.shared.config.v1.Service
	1,  // 11: mkit.shared.config.v1.Services.emailer:type_name -> mkit.shared.config.v1.Service
	1,  // 12: mkit.shared.config.v1.Services.recorder:type_name -> mkit.shared.config.v1.Service
	1,  // 13: mkit.shared.config.v1.Services.play:type_name -> mkit.shared.config.v1.Service
	3,  // 14: mkit.shared.config.v1.Configuration.database:type_name -> mkit.shared.config.v1.DatabaseConfiguration
	2,  // 15: mkit.shared.config.v1.Configuration.email:type_name -> mkit.shared.config.v1.EmailConfiguration
	4,  // 16: mkit.shared.config.v1.Configuration.features:type_name -> mkit.shared.config.v1.Features
	5,  // 17: mkit.shared.config.v1.Configuration.services:type_name -> mkit.shared.config.v1.Services
	15, // 18: mkit.shared.config.v1.ConfigService.Get:input_type -> google.protobuf.Empty
	6,  // 19: mkit.shared.config.v1.ConfigService.Set:input_type -> mkit.shared.config.v1.Configuration
	6,  // 20: mkit.shared.config.v1.ConfigService.Get:output_type -> mkit.shared.config.v1.Configuration
	15, // 21: mkit.shared.config.v1.ConfigService.Set:output_type -> google.protobuf.Empty
	20, // [20:22] is the sub-list for method output_type
	18, // [18:20] is the sub-list for method input_type
	18, // [18:18] is the sub-list for extension type_name
	18, // [18:18] is the sub-list for extension extendee
	0,  // [0:18] is the sub-list for field type_name
}

func init() { file_mkit_shared_config_v1_config_proto_init() }
func file_mkit_shared_config_v1_config_proto_init() {
	if File_mkit_shared_config_v1_config_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_mkit_shared_config_v1_config_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Service); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EmailConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DatabaseConfiguration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Services); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Configuration); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features_Metrics); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features_Tracing); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features_TLS); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features_Validator); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features_Rpclog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_mkit_shared_config_v1_config_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Features_Translog); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_mkit_shared_config_v1_config_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   13,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_mkit_shared_config_v1_config_proto_goTypes,
		DependencyIndexes: file_mkit_shared_config_v1_config_proto_depIdxs,
		EnumInfos:         file_mkit_shared_config_v1_config_proto_enumTypes,
		MessageInfos:      file_mkit_shared_config_v1_config_proto_msgTypes,
	}.Build()
	File_mkit_shared_config_v1_config_proto = out.File
	file_mkit_shared_config_v1_config_proto_rawDesc = nil
	file_mkit_shared_config_v1_config_proto_goTypes = nil
	file_mkit_shared_config_v1_config_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigServiceClient interface {
	Get(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Configuration, error)
	Set(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*empty.Empty, error)
}

type configServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewConfigServiceClient(cc grpc.ClientConnInterface) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) Get(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/mkit.shared.config.v1.ConfigService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Set(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mkit.shared.config.v1.ConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
type ConfigServiceServer interface {
	Get(context.Context, *empty.Empty) (*Configuration, error)
	Set(context.Context, *Configuration) (*empty.Empty, error)
}

// UnimplementedConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (*UnimplementedConfigServiceServer) Get(context.Context, *empty.Empty) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedConfigServiceServer) Set(context.Context, *Configuration) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}

func RegisterConfigServiceServer(s *grpc.Server, srv ConfigServiceServer) {
	s.RegisterService(&_ConfigService_serviceDesc, srv)
}

func _ConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mkit.shared.config.v1.ConfigService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Get(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mkit.shared.config.v1.ConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Set(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mkit.shared.config.v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ConfigService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ConfigService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "mkit/shared/config/v1/config.proto",
}

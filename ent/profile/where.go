// Code generated by entc, DO NOT EDIT.

package profile

import (
	"time"

	"github.com/facebook/ent/dialect/sql"
	"github.com/facebook/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/xmlking/grpc-starter-kit/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// CreateTime applies equality check predicate on the "create_time" field. It's identical to CreateTimeEQ.
func CreateTime(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// UpdateTime applies equality check predicate on the "update_time" field. It's identical to UpdateTimeEQ.
func UpdateTime(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// DeleteTime applies equality check predicate on the "delete_time" field. It's identical to DeleteTimeEQ.
func DeleteTime(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// Age applies equality check predicate on the "age" field. It's identical to AgeEQ.
func Age(v int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// Tz applies equality check predicate on the "tz" field. It's identical to TzEQ.
func Tz(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTz), v))
	})
}

// Birthday applies equality check predicate on the "birthday" field. It's identical to BirthdayEQ.
func Birthday(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthday), v))
	})
}

// PreferredTheme applies equality check predicate on the "preferred_theme" field. It's identical to PreferredThemeEQ.
func PreferredTheme(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreferredTheme), v))
	})
}

// CreateTimeEQ applies the EQ predicate on the "create_time" field.
func CreateTimeEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeNEQ applies the NEQ predicate on the "create_time" field.
func CreateTimeNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreateTime), v))
	})
}

// CreateTimeIn applies the In predicate on the "create_time" field.
func CreateTimeIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeNotIn applies the NotIn predicate on the "create_time" field.
func CreateTimeNotIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreateTime), v...))
	})
}

// CreateTimeGT applies the GT predicate on the "create_time" field.
func CreateTimeGT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeGTE applies the GTE predicate on the "create_time" field.
func CreateTimeGTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLT applies the LT predicate on the "create_time" field.
func CreateTimeLT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreateTime), v))
	})
}

// CreateTimeLTE applies the LTE predicate on the "create_time" field.
func CreateTimeLTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreateTime), v))
	})
}

// UpdateTimeEQ applies the EQ predicate on the "update_time" field.
func UpdateTimeEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeNEQ applies the NEQ predicate on the "update_time" field.
func UpdateTimeNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeIn applies the In predicate on the "update_time" field.
func UpdateTimeIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeNotIn applies the NotIn predicate on the "update_time" field.
func UpdateTimeNotIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdateTime), v...))
	})
}

// UpdateTimeGT applies the GT predicate on the "update_time" field.
func UpdateTimeGT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeGTE applies the GTE predicate on the "update_time" field.
func UpdateTimeGTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLT applies the LT predicate on the "update_time" field.
func UpdateTimeLT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdateTime), v))
	})
}

// UpdateTimeLTE applies the LTE predicate on the "update_time" field.
func UpdateTimeLTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdateTime), v))
	})
}

// DeleteTimeEQ applies the EQ predicate on the "delete_time" field.
func DeleteTimeEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeNEQ applies the NEQ predicate on the "delete_time" field.
func DeleteTimeNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIn applies the In predicate on the "delete_time" field.
func DeleteTimeIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeNotIn applies the NotIn predicate on the "delete_time" field.
func DeleteTimeNotIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldDeleteTime), v...))
	})
}

// DeleteTimeGT applies the GT predicate on the "delete_time" field.
func DeleteTimeGT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeGTE applies the GTE predicate on the "delete_time" field.
func DeleteTimeGTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLT applies the LT predicate on the "delete_time" field.
func DeleteTimeLT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeLTE applies the LTE predicate on the "delete_time" field.
func DeleteTimeLTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldDeleteTime), v))
	})
}

// DeleteTimeIsNil applies the IsNil predicate on the "delete_time" field.
func DeleteTimeIsNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldDeleteTime)))
	})
}

// DeleteTimeNotNil applies the NotNil predicate on the "delete_time" field.
func DeleteTimeNotNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldDeleteTime)))
	})
}

// AgeEQ applies the EQ predicate on the "age" field.
func AgeEQ(v int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAge), v))
	})
}

// AgeNEQ applies the NEQ predicate on the "age" field.
func AgeNEQ(v int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAge), v))
	})
}

// AgeIn applies the In predicate on the "age" field.
func AgeIn(vs ...int) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAge), v...))
	})
}

// AgeNotIn applies the NotIn predicate on the "age" field.
func AgeNotIn(vs ...int) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAge), v...))
	})
}

// AgeGT applies the GT predicate on the "age" field.
func AgeGT(v int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAge), v))
	})
}

// AgeGTE applies the GTE predicate on the "age" field.
func AgeGTE(v int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAge), v))
	})
}

// AgeLT applies the LT predicate on the "age" field.
func AgeLT(v int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAge), v))
	})
}

// AgeLTE applies the LTE predicate on the "age" field.
func AgeLTE(v int) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAge), v))
	})
}

// TzEQ applies the EQ predicate on the "tz" field.
func TzEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTz), v))
	})
}

// TzNEQ applies the NEQ predicate on the "tz" field.
func TzNEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTz), v))
	})
}

// TzIn applies the In predicate on the "tz" field.
func TzIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTz), v...))
	})
}

// TzNotIn applies the NotIn predicate on the "tz" field.
func TzNotIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTz), v...))
	})
}

// TzGT applies the GT predicate on the "tz" field.
func TzGT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldTz), v))
	})
}

// TzGTE applies the GTE predicate on the "tz" field.
func TzGTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldTz), v))
	})
}

// TzLT applies the LT predicate on the "tz" field.
func TzLT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldTz), v))
	})
}

// TzLTE applies the LTE predicate on the "tz" field.
func TzLTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldTz), v))
	})
}

// TzContains applies the Contains predicate on the "tz" field.
func TzContains(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldTz), v))
	})
}

// TzHasPrefix applies the HasPrefix predicate on the "tz" field.
func TzHasPrefix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldTz), v))
	})
}

// TzHasSuffix applies the HasSuffix predicate on the "tz" field.
func TzHasSuffix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldTz), v))
	})
}

// TzEqualFold applies the EqualFold predicate on the "tz" field.
func TzEqualFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldTz), v))
	})
}

// TzContainsFold applies the ContainsFold predicate on the "tz" field.
func TzContainsFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldTz), v))
	})
}

// AvatarIsNil applies the IsNil predicate on the "avatar" field.
func AvatarIsNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldAvatar)))
	})
}

// AvatarNotNil applies the NotNil predicate on the "avatar" field.
func AvatarNotNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldAvatar)))
	})
}

// BirthdayEQ applies the EQ predicate on the "birthday" field.
func BirthdayEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthday), v))
	})
}

// BirthdayNEQ applies the NEQ predicate on the "birthday" field.
func BirthdayNEQ(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthday), v))
	})
}

// BirthdayIn applies the In predicate on the "birthday" field.
func BirthdayIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirthday), v...))
	})
}

// BirthdayNotIn applies the NotIn predicate on the "birthday" field.
func BirthdayNotIn(vs ...time.Time) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirthday), v...))
	})
}

// BirthdayGT applies the GT predicate on the "birthday" field.
func BirthdayGT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthday), v))
	})
}

// BirthdayGTE applies the GTE predicate on the "birthday" field.
func BirthdayGTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthday), v))
	})
}

// BirthdayLT applies the LT predicate on the "birthday" field.
func BirthdayLT(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthday), v))
	})
}

// BirthdayLTE applies the LTE predicate on the "birthday" field.
func BirthdayLTE(v time.Time) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthday), v))
	})
}

// BirthdayIsNil applies the IsNil predicate on the "birthday" field.
func BirthdayIsNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldBirthday)))
	})
}

// BirthdayNotNil applies the NotNil predicate on the "birthday" field.
func BirthdayNotNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldBirthday)))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v Gender) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v Gender) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...Gender) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...Gender) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderIsNil applies the IsNil predicate on the "gender" field.
func GenderIsNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldGender)))
	})
}

// GenderNotNil applies the NotNil predicate on the "gender" field.
func GenderNotNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldGender)))
	})
}

// PreferredThemeEQ applies the EQ predicate on the "preferred_theme" field.
func PreferredThemeEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPreferredTheme), v))
	})
}

// PreferredThemeNEQ applies the NEQ predicate on the "preferred_theme" field.
func PreferredThemeNEQ(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPreferredTheme), v))
	})
}

// PreferredThemeIn applies the In predicate on the "preferred_theme" field.
func PreferredThemeIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPreferredTheme), v...))
	})
}

// PreferredThemeNotIn applies the NotIn predicate on the "preferred_theme" field.
func PreferredThemeNotIn(vs ...string) predicate.Profile {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Profile(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPreferredTheme), v...))
	})
}

// PreferredThemeGT applies the GT predicate on the "preferred_theme" field.
func PreferredThemeGT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPreferredTheme), v))
	})
}

// PreferredThemeGTE applies the GTE predicate on the "preferred_theme" field.
func PreferredThemeGTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPreferredTheme), v))
	})
}

// PreferredThemeLT applies the LT predicate on the "preferred_theme" field.
func PreferredThemeLT(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPreferredTheme), v))
	})
}

// PreferredThemeLTE applies the LTE predicate on the "preferred_theme" field.
func PreferredThemeLTE(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPreferredTheme), v))
	})
}

// PreferredThemeContains applies the Contains predicate on the "preferred_theme" field.
func PreferredThemeContains(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldPreferredTheme), v))
	})
}

// PreferredThemeHasPrefix applies the HasPrefix predicate on the "preferred_theme" field.
func PreferredThemeHasPrefix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldPreferredTheme), v))
	})
}

// PreferredThemeHasSuffix applies the HasSuffix predicate on the "preferred_theme" field.
func PreferredThemeHasSuffix(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldPreferredTheme), v))
	})
}

// PreferredThemeIsNil applies the IsNil predicate on the "preferred_theme" field.
func PreferredThemeIsNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldPreferredTheme)))
	})
}

// PreferredThemeNotNil applies the NotNil predicate on the "preferred_theme" field.
func PreferredThemeNotNil() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldPreferredTheme)))
	})
}

// PreferredThemeEqualFold applies the EqualFold predicate on the "preferred_theme" field.
func PreferredThemeEqualFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldPreferredTheme), v))
	})
}

// PreferredThemeContainsFold applies the ContainsFold predicate on the "preferred_theme" field.
func PreferredThemeContainsFold(v string) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldPreferredTheme), v))
	})
}

// HasUser applies the HasEdge predicate on the "user" edge.
func HasUser() predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasUserWith applies the HasEdge predicate on the "user" edge with a given conditions (other predicates).
func HasUserWith(preds ...predicate.User) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(UserInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, UserTable, UserColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Profile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Profile) predicate.Profile {
	return predicate.Profile(func(s *sql.Selector) {
		p(s.Not())
	})
}

// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: shared/proto/config/v1/config.proto

package configv1

import (
	context "context"
	fmt "fmt"
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/gogo/protobuf/gogoproto"
	github_com_gogo_protobuf_types "github.com/gogo/protobuf/types"
	proto "github.com/golang/protobuf/proto"
	_ "github.com/golang/protobuf/ptypes/duration"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
	time "time"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf
var _ = time.Kitchen

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type DatabaseDialect int32

const (
	DatabaseDialect_Unspecified DatabaseDialect = 0
	DatabaseDialect_Postgres    DatabaseDialect = 1
	DatabaseDialect_MySQL       DatabaseDialect = 2
	DatabaseDialect_SQLite3     DatabaseDialect = 3
)

var DatabaseDialect_name = map[int32]string{
	0: "Unspecified",
	1: "Postgres",
	2: "MySQL",
	3: "SQLite3",
}

var DatabaseDialect_value = map[string]int32{
	"Unspecified": 0,
	"Postgres":    1,
	"MySQL":       2,
	"SQLite3":     3,
}

func (x DatabaseDialect) String() string {
	return proto.EnumName(DatabaseDialect_name, int32(x))
}

func (DatabaseDialect) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{0}
}

type Service struct {
	Endpoint             string   `protobuf:"bytes,1,opt,name=endpoint,proto3" json:"endpoint,omitempty" yaml:"endpoint" required:"true"`
	Version              string   `protobuf:"bytes,2,opt,name=version,proto3" json:"version,omitempty" yaml:",omitempty" default:"v0.1.0"`
	ServiceConfig        string   `protobuf:"bytes,3,opt,name=service_config,json=serviceConfig,proto3" json:"service_config,omitempty" yaml:"service_config,omitempty"`
	Deadline             uint32   `protobuf:"varint,4,opt,name=deadline,proto3" json:"deadline,omitempty" yaml:",omitempty" default:"10"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Service) Reset()         { *m = Service{} }
func (m *Service) String() string { return proto.CompactTextString(m) }
func (*Service) ProtoMessage()    {}
func (*Service) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{0}
}
func (m *Service) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Service) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Service.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Service) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Service.Merge(m, src)
}
func (m *Service) XXX_Size() int {
	return m.Size()
}
func (m *Service) XXX_DiscardUnknown() {
	xxx_messageInfo_Service.DiscardUnknown(m)
}

var xxx_messageInfo_Service proto.InternalMessageInfo

func (m *Service) GetEndpoint() string {
	if m != nil {
		return m.Endpoint
	}
	return ""
}

func (m *Service) GetVersion() string {
	if m != nil {
		return m.Version
	}
	return ""
}

func (m *Service) GetServiceConfig() string {
	if m != nil {
		return m.ServiceConfig
	}
	return ""
}

func (m *Service) GetDeadline() uint32 {
	if m != nil {
		return m.Deadline
	}
	return 0
}

type EmailConfiguration struct {
	Username             string   `protobuf:"bytes,1,opt,name=username,proto3" json:"username,omitempty" yaml:"username"`
	Password             string   `protobuf:"bytes,2,opt,name=password,proto3" json:"password,omitempty"`
	EmailServer          string   `protobuf:"bytes,3,opt,name=email_server,json=emailServer,proto3" json:"email_server,omitempty" yaml:"email_server"`
	Port                 uint32   `protobuf:"varint,4,opt,name=port,proto3" json:"port,omitempty" yaml:",omitempty" default:"587" valid:"port"`
	From                 string   `protobuf:"bytes,5,opt,name=from,proto3" json:"from,omitempty" valid:"email,optional"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *EmailConfiguration) Reset()         { *m = EmailConfiguration{} }
func (m *EmailConfiguration) String() string { return proto.CompactTextString(m) }
func (*EmailConfiguration) ProtoMessage()    {}
func (*EmailConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{1}
}
func (m *EmailConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *EmailConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_EmailConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *EmailConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_EmailConfiguration.Merge(m, src)
}
func (m *EmailConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *EmailConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_EmailConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_EmailConfiguration proto.InternalMessageInfo

func (m *EmailConfiguration) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *EmailConfiguration) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *EmailConfiguration) GetEmailServer() string {
	if m != nil {
		return m.EmailServer
	}
	return ""
}

func (m *EmailConfiguration) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *EmailConfiguration) GetFrom() string {
	if m != nil {
		return m.From
	}
	return ""
}

type DatabaseConfiguration struct {
	Dialect              DatabaseDialect `protobuf:"varint,1,opt,name=dialect,proto3,enum=mkit.shared.config.v1.DatabaseDialect" json:"dialect,omitempty" yaml:",omitempty" valid:"in(Postgres|MySQL|SQLite3)" default:"2"`
	Host                 string          `protobuf:"bytes,2,opt,name=host,proto3" json:"host,omitempty" yaml:",omitempty" valid:"host"`
	Port                 uint32          `protobuf:"varint,3,opt,name=port,proto3" json:"port,omitempty" yaml:",omitempty" default:"5432" valid:"port"`
	Username             string          `protobuf:"bytes,4,opt,name=username,proto3" json:"username,omitempty" valid:"alphanum,required"`
	Password             string          `protobuf:"bytes,5,opt,name=password,proto3" json:"password,omitempty" valid:"alphanum,required"`
	Database             string          `protobuf:"bytes,6,opt,name=database,proto3" json:"database,omitempty" valid:"type(string),required"`
	Charset              string          `protobuf:"bytes,7,opt,name=charset,proto3" json:"charset,omitempty" yaml:",omitempty" default:"utf8"`
	Utc                  bool            `protobuf:"varint,8,opt,name=utc,proto3" json:"utc,omitempty" yaml:",omitempty" default:"true"`
	Logging              bool            `protobuf:"varint,9,opt,name=logging,proto3" json:"logging,omitempty" yaml:",omitempty" default:"false"`
	Singularize          bool            `protobuf:"varint,10,opt,name=singularize,proto3" json:"singularize,omitempty" yaml:",omitempty" default:"false"`
	MaxOpenConns         uint32          `protobuf:"varint,11,opt,name=max_open_conns,json=maxOpenConns,proto3" json:"max_open_conns,omitempty" yaml:"max_open_conns,omitempty" default:"1"`
	MaxIdleConns         uint32          `protobuf:"varint,12,opt,name=max_idle_conns,json=maxIdleConns,proto3" json:"max_idle_conns,omitempty" yaml:"max_idle_conns,omitempty" default:"1"`
	ConnMaxLifetime      *time.Duration  `protobuf:"bytes,13,opt,name=conn_max_lifetime,json=connMaxLifetime,proto3,stdduration" json:"conn_max_lifetime,omitempty" yaml:"conn_max_lifetime,omitempty" default:"1h"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *DatabaseConfiguration) Reset()         { *m = DatabaseConfiguration{} }
func (m *DatabaseConfiguration) String() string { return proto.CompactTextString(m) }
func (*DatabaseConfiguration) ProtoMessage()    {}
func (*DatabaseConfiguration) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{2}
}
func (m *DatabaseConfiguration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *DatabaseConfiguration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_DatabaseConfiguration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *DatabaseConfiguration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_DatabaseConfiguration.Merge(m, src)
}
func (m *DatabaseConfiguration) XXX_Size() int {
	return m.Size()
}
func (m *DatabaseConfiguration) XXX_DiscardUnknown() {
	xxx_messageInfo_DatabaseConfiguration.DiscardUnknown(m)
}

var xxx_messageInfo_DatabaseConfiguration proto.InternalMessageInfo

func (m *DatabaseConfiguration) GetDialect() DatabaseDialect {
	if m != nil {
		return m.Dialect
	}
	return DatabaseDialect_Unspecified
}

func (m *DatabaseConfiguration) GetHost() string {
	if m != nil {
		return m.Host
	}
	return ""
}

func (m *DatabaseConfiguration) GetPort() uint32 {
	if m != nil {
		return m.Port
	}
	return 0
}

func (m *DatabaseConfiguration) GetUsername() string {
	if m != nil {
		return m.Username
	}
	return ""
}

func (m *DatabaseConfiguration) GetPassword() string {
	if m != nil {
		return m.Password
	}
	return ""
}

func (m *DatabaseConfiguration) GetDatabase() string {
	if m != nil {
		return m.Database
	}
	return ""
}

func (m *DatabaseConfiguration) GetCharset() string {
	if m != nil {
		return m.Charset
	}
	return ""
}

func (m *DatabaseConfiguration) GetUtc() bool {
	if m != nil {
		return m.Utc
	}
	return false
}

func (m *DatabaseConfiguration) GetLogging() bool {
	if m != nil {
		return m.Logging
	}
	return false
}

func (m *DatabaseConfiguration) GetSingularize() bool {
	if m != nil {
		return m.Singularize
	}
	return false
}

func (m *DatabaseConfiguration) GetMaxOpenConns() uint32 {
	if m != nil {
		return m.MaxOpenConns
	}
	return 0
}

func (m *DatabaseConfiguration) GetMaxIdleConns() uint32 {
	if m != nil {
		return m.MaxIdleConns
	}
	return 0
}

func (m *DatabaseConfiguration) GetConnMaxLifetime() *time.Duration {
	if m != nil {
		return m.ConnMaxLifetime
	}
	return nil
}

type Features struct {
	Metrics              *Features_Metrics   `protobuf:"bytes,1,opt,name=metrics,proto3" json:"metrics,omitempty"`
	Tracing              *Features_Tracing   `protobuf:"bytes,2,opt,name=tracing,proto3" json:"tracing,omitempty"`
	Tls                  *Features_TLS       `protobuf:"bytes,3,opt,name=tls,proto3" json:"tls,omitempty"`
	Validator            *Features_Validator `protobuf:"bytes,4,opt,name=validator,proto3" json:"validator,omitempty"`
	Rpclog               *Features_Rpclog    `protobuf:"bytes,5,opt,name=rpclog,proto3" json:"rpclog,omitempty"`
	Translog             *Features_Translog  `protobuf:"bytes,6,opt,name=translog,proto3" json:"translog,omitempty"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *Features) Reset()         { *m = Features{} }
func (m *Features) String() string { return proto.CompactTextString(m) }
func (*Features) ProtoMessage()    {}
func (*Features) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{3}
}
func (m *Features) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Features) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Features.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Features) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Features.Merge(m, src)
}
func (m *Features) XXX_Size() int {
	return m.Size()
}
func (m *Features) XXX_DiscardUnknown() {
	xxx_messageInfo_Features.DiscardUnknown(m)
}

var xxx_messageInfo_Features proto.InternalMessageInfo

func (m *Features) GetMetrics() *Features_Metrics {
	if m != nil {
		return m.Metrics
	}
	return nil
}

func (m *Features) GetTracing() *Features_Tracing {
	if m != nil {
		return m.Tracing
	}
	return nil
}

func (m *Features) GetTls() *Features_TLS {
	if m != nil {
		return m.Tls
	}
	return nil
}

func (m *Features) GetValidator() *Features_Validator {
	if m != nil {
		return m.Validator
	}
	return nil
}

func (m *Features) GetRpclog() *Features_Rpclog {
	if m != nil {
		return m.Rpclog
	}
	return nil
}

func (m *Features) GetTranslog() *Features_Translog {
	if m != nil {
		return m.Translog
	}
	return nil
}

type Features_Metrics struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" yaml:",omitempty" default:"false"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	FlushInterval        uint64   `protobuf:"varint,3,opt,name=flush_interval,json=flushInterval,proto3" json:"flush_interval,omitempty" yaml:"flush_interval,omitempty" default:"10000000"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Features_Metrics) Reset()         { *m = Features_Metrics{} }
func (m *Features_Metrics) String() string { return proto.CompactTextString(m) }
func (*Features_Metrics) ProtoMessage()    {}
func (*Features_Metrics) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{3, 0}
}
func (m *Features_Metrics) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Features_Metrics) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Features_Metrics.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Features_Metrics) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Features_Metrics.Merge(m, src)
}
func (m *Features_Metrics) XXX_Size() int {
	return m.Size()
}
func (m *Features_Metrics) XXX_DiscardUnknown() {
	xxx_messageInfo_Features_Metrics.DiscardUnknown(m)
}

var xxx_messageInfo_Features_Metrics proto.InternalMessageInfo

func (m *Features_Metrics) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Features_Metrics) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Features_Metrics) GetFlushInterval() uint64 {
	if m != nil {
		return m.FlushInterval
	}
	return 0
}

type Features_Tracing struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" yaml:",omitempty" default:"false"`
	Address              string   `protobuf:"bytes,2,opt,name=address,proto3" json:"address,omitempty"`
	FlushInterval        uint64   `protobuf:"varint,3,opt,name=flush_interval,json=flushInterval,proto3" json:"flush_interval,omitempty" yaml:"flush_interval,omitempty" default:"10000000"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Features_Tracing) Reset()         { *m = Features_Tracing{} }
func (m *Features_Tracing) String() string { return proto.CompactTextString(m) }
func (*Features_Tracing) ProtoMessage()    {}
func (*Features_Tracing) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{3, 1}
}
func (m *Features_Tracing) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Features_Tracing) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Features_Tracing.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Features_Tracing) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Features_Tracing.Merge(m, src)
}
func (m *Features_Tracing) XXX_Size() int {
	return m.Size()
}
func (m *Features_Tracing) XXX_DiscardUnknown() {
	xxx_messageInfo_Features_Tracing.DiscardUnknown(m)
}

var xxx_messageInfo_Features_Tracing proto.InternalMessageInfo

func (m *Features_Tracing) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Features_Tracing) GetAddress() string {
	if m != nil {
		return m.Address
	}
	return ""
}

func (m *Features_Tracing) GetFlushInterval() uint64 {
	if m != nil {
		return m.FlushInterval
	}
	return 0
}

type Features_TLS struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" yaml:",omitempty" default:"false"`
	CertFile             string   `protobuf:"bytes,2,opt,name=cert_file,json=certFile,proto3" json:"cert_file,omitempty" yaml:"cert_file" valid:"type(string),required"`
	KeyFile              string   `protobuf:"bytes,3,opt,name=key_file,json=keyFile,proto3" json:"key_file,omitempty" yaml:"key_file" valid:"type(string),required"`
	CaFile               string   `protobuf:"bytes,4,opt,name=ca_file,json=caFile,proto3" json:"ca_file,omitempty" yaml:"ca_file" valid:"type(string),required"`
	Servername           string   `protobuf:"bytes,5,opt,name=servername,proto3" json:"servername,omitempty" yaml:",omitempty" default:"'*'"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Features_TLS) Reset()         { *m = Features_TLS{} }
func (m *Features_TLS) String() string { return proto.CompactTextString(m) }
func (*Features_TLS) ProtoMessage()    {}
func (*Features_TLS) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{3, 2}
}
func (m *Features_TLS) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Features_TLS) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Features_TLS.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Features_TLS) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Features_TLS.Merge(m, src)
}
func (m *Features_TLS) XXX_Size() int {
	return m.Size()
}
func (m *Features_TLS) XXX_DiscardUnknown() {
	xxx_messageInfo_Features_TLS.DiscardUnknown(m)
}

var xxx_messageInfo_Features_TLS proto.InternalMessageInfo

func (m *Features_TLS) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Features_TLS) GetCertFile() string {
	if m != nil {
		return m.CertFile
	}
	return ""
}

func (m *Features_TLS) GetKeyFile() string {
	if m != nil {
		return m.KeyFile
	}
	return ""
}

func (m *Features_TLS) GetCaFile() string {
	if m != nil {
		return m.CaFile
	}
	return ""
}

func (m *Features_TLS) GetServername() string {
	if m != nil {
		return m.Servername
	}
	return ""
}

type Features_Validator struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" yaml:",omitempty" default:"false"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Features_Validator) Reset()         { *m = Features_Validator{} }
func (m *Features_Validator) String() string { return proto.CompactTextString(m) }
func (*Features_Validator) ProtoMessage()    {}
func (*Features_Validator) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{3, 3}
}
func (m *Features_Validator) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Features_Validator) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Features_Validator.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Features_Validator) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Features_Validator.Merge(m, src)
}
func (m *Features_Validator) XXX_Size() int {
	return m.Size()
}
func (m *Features_Validator) XXX_DiscardUnknown() {
	xxx_messageInfo_Features_Validator.DiscardUnknown(m)
}

var xxx_messageInfo_Features_Validator proto.InternalMessageInfo

func (m *Features_Validator) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type Features_Rpclog struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" yaml:",omitempty" default:"false"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Features_Rpclog) Reset()         { *m = Features_Rpclog{} }
func (m *Features_Rpclog) String() string { return proto.CompactTextString(m) }
func (*Features_Rpclog) ProtoMessage()    {}
func (*Features_Rpclog) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{3, 4}
}
func (m *Features_Rpclog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Features_Rpclog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Features_Rpclog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Features_Rpclog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Features_Rpclog.Merge(m, src)
}
func (m *Features_Rpclog) XXX_Size() int {
	return m.Size()
}
func (m *Features_Rpclog) XXX_DiscardUnknown() {
	xxx_messageInfo_Features_Rpclog.DiscardUnknown(m)
}

var xxx_messageInfo_Features_Rpclog proto.InternalMessageInfo

func (m *Features_Rpclog) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

type Features_Translog struct {
	Enabled              bool     `protobuf:"varint,1,opt,name=enabled,proto3" json:"enabled,omitempty" yaml:",omitempty" default:"false"`
	Topic                string   `protobuf:"bytes,2,opt,name=topic,proto3" json:"topic,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Features_Translog) Reset()         { *m = Features_Translog{} }
func (m *Features_Translog) String() string { return proto.CompactTextString(m) }
func (*Features_Translog) ProtoMessage()    {}
func (*Features_Translog) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{3, 5}
}
func (m *Features_Translog) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Features_Translog) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Features_Translog.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Features_Translog) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Features_Translog.Merge(m, src)
}
func (m *Features_Translog) XXX_Size() int {
	return m.Size()
}
func (m *Features_Translog) XXX_DiscardUnknown() {
	xxx_messageInfo_Features_Translog.DiscardUnknown(m)
}

var xxx_messageInfo_Features_Translog proto.InternalMessageInfo

func (m *Features_Translog) GetEnabled() bool {
	if m != nil {
		return m.Enabled
	}
	return false
}

func (m *Features_Translog) GetTopic() string {
	if m != nil {
		return m.Topic
	}
	return ""
}

type Services struct {
	Account              *Service `protobuf:"bytes,1,opt,name=account,proto3" json:"account,omitempty"`
	Greeter              *Service `protobuf:"bytes,2,opt,name=greeter,proto3" json:"greeter,omitempty"`
	Emailer              *Service `protobuf:"bytes,3,opt,name=emailer,proto3" json:"emailer,omitempty"`
	Recorder             *Service `protobuf:"bytes,4,opt,name=recorder,proto3" json:"recorder,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Services) Reset()         { *m = Services{} }
func (m *Services) String() string { return proto.CompactTextString(m) }
func (*Services) ProtoMessage()    {}
func (*Services) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{4}
}
func (m *Services) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Services) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Services.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Services) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Services.Merge(m, src)
}
func (m *Services) XXX_Size() int {
	return m.Size()
}
func (m *Services) XXX_DiscardUnknown() {
	xxx_messageInfo_Services.DiscardUnknown(m)
}

var xxx_messageInfo_Services proto.InternalMessageInfo

func (m *Services) GetAccount() *Service {
	if m != nil {
		return m.Account
	}
	return nil
}

func (m *Services) GetGreeter() *Service {
	if m != nil {
		return m.Greeter
	}
	return nil
}

func (m *Services) GetEmailer() *Service {
	if m != nil {
		return m.Emailer
	}
	return nil
}

func (m *Services) GetRecorder() *Service {
	if m != nil {
		return m.Recorder
	}
	return nil
}

type Configuration struct {
	Database             *DatabaseConfiguration `protobuf:"bytes,3,opt,name=database,proto3" json:"database,omitempty"`
	Email                *EmailConfiguration    `protobuf:"bytes,4,opt,name=email,proto3" json:"email,omitempty"`
	Features             *Features              `protobuf:"bytes,5,opt,name=features,proto3" json:"features,omitempty"`
	Services             *Services              `protobuf:"bytes,6,opt,name=services,proto3" json:"services,omitempty"`
	XXX_NoUnkeyedLiteral struct{}               `json:"-"`
	XXX_unrecognized     []byte                 `json:"-"`
	XXX_sizecache        int32                  `json:"-"`
}

func (m *Configuration) Reset()         { *m = Configuration{} }
func (m *Configuration) String() string { return proto.CompactTextString(m) }
func (*Configuration) ProtoMessage()    {}
func (*Configuration) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbaea780eac186db, []int{5}
}
func (m *Configuration) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Configuration) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Configuration.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Configuration) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Configuration.Merge(m, src)
}
func (m *Configuration) XXX_Size() int {
	return m.Size()
}
func (m *Configuration) XXX_DiscardUnknown() {
	xxx_messageInfo_Configuration.DiscardUnknown(m)
}

var xxx_messageInfo_Configuration proto.InternalMessageInfo

func (m *Configuration) GetDatabase() *DatabaseConfiguration {
	if m != nil {
		return m.Database
	}
	return nil
}

func (m *Configuration) GetEmail() *EmailConfiguration {
	if m != nil {
		return m.Email
	}
	return nil
}

func (m *Configuration) GetFeatures() *Features {
	if m != nil {
		return m.Features
	}
	return nil
}

func (m *Configuration) GetServices() *Services {
	if m != nil {
		return m.Services
	}
	return nil
}

func init() {
	proto.RegisterEnum("mkit.shared.config.v1.DatabaseDialect", DatabaseDialect_name, DatabaseDialect_value)
	proto.RegisterType((*Service)(nil), "mkit.shared.config.v1.Service")
	proto.RegisterType((*EmailConfiguration)(nil), "mkit.shared.config.v1.EmailConfiguration")
	proto.RegisterType((*DatabaseConfiguration)(nil), "mkit.shared.config.v1.DatabaseConfiguration")
	proto.RegisterType((*Features)(nil), "mkit.shared.config.v1.Features")
	proto.RegisterType((*Features_Metrics)(nil), "mkit.shared.config.v1.Features.Metrics")
	proto.RegisterType((*Features_Tracing)(nil), "mkit.shared.config.v1.Features.Tracing")
	proto.RegisterType((*Features_TLS)(nil), "mkit.shared.config.v1.Features.TLS")
	proto.RegisterType((*Features_Validator)(nil), "mkit.shared.config.v1.Features.Validator")
	proto.RegisterType((*Features_Rpclog)(nil), "mkit.shared.config.v1.Features.Rpclog")
	proto.RegisterType((*Features_Translog)(nil), "mkit.shared.config.v1.Features.Translog")
	proto.RegisterType((*Services)(nil), "mkit.shared.config.v1.Services")
	proto.RegisterType((*Configuration)(nil), "mkit.shared.config.v1.Configuration")
}

func init() {
	proto.RegisterFile("shared/proto/config/v1/config.proto", fileDescriptor_dbaea780eac186db)
}

var fileDescriptor_dbaea780eac186db = []byte{
	// 1449 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xd4, 0x97, 0xdd, 0x6e, 0x1b, 0x45,
	0x14, 0xc7, 0xbb, 0x71, 0x12, 0x6f, 0xc6, 0xf9, 0x62, 0x4a, 0x8b, 0x6b, 0xd4, 0xac, 0x3b, 0x2d,
	0x6d, 0x52, 0x52, 0x3b, 0x71, 0xe9, 0x57, 0x10, 0x6d, 0x49, 0xd2, 0x8f, 0xa0, 0x54, 0x6d, 0x27,
	0x2d, 0x17, 0x48, 0x28, 0x9a, 0xec, 0x8e, 0xd7, 0xa3, 0xac, 0x77, 0x97, 0xd9, 0xb1, 0x49, 0x50,
	0xc5, 0x15, 0xe2, 0x05, 0x90, 0x50, 0xfb, 0x3c, 0xdc, 0x70, 0xc9, 0x13, 0x2c, 0xa8, 0xbc, 0xc1,
	0x0a, 0x24, 0x2e, 0xd1, 0xce, 0xcc, 0xba, 0x4e, 0xe2, 0x8f, 0xa0, 0x5c, 0x91, 0x2b, 0x6f, 0xce,
	0xff, 0x77, 0x66, 0xe6, 0xec, 0x39, 0x73, 0xce, 0x82, 0x8b, 0x51, 0x83, 0x70, 0xea, 0x54, 0x43,
	0x1e, 0x88, 0xa0, 0x6a, 0x07, 0x7e, 0x9d, 0xb9, 0xd5, 0xf6, 0xb2, 0xfe, 0x55, 0x91, 0xff, 0x86,
	0x67, 0x9a, 0xbb, 0x4c, 0x54, 0x94, 0xb2, 0xa2, 0x2d, 0xed, 0xe5, 0xd2, 0x87, 0x6e, 0x10, 0xb8,
	0x1e, 0x55, 0xec, 0x4e, 0xab, 0x5e, 0xa5, 0xcd, 0x50, 0xec, 0x2b, 0xa6, 0x34, 0x77, 0xd8, 0xe8,
	0xb4, 0x38, 0x11, 0x2c, 0xf0, 0xb5, 0x7d, 0x41, 0x34, 0x18, 0x77, 0xb6, 0x43, 0xc2, 0xc5, 0xbe,
	0x5e, 0xbd, 0x4d, 0x3c, 0xe6, 0x10, 0x41, 0x3b, 0x3f, 0xb4, 0xf4, 0xf2, 0x51, 0xa9, 0x1b, 0xb8,
	0xc1, 0xbb, 0x5f, 0x4a, 0x87, 0x5e, 0x8f, 0x80, 0xfc, 0x16, 0xe5, 0x6d, 0x66, 0x53, 0x78, 0x0f,
	0x98, 0xd4, 0x77, 0xc2, 0x80, 0xf9, 0xa2, 0x68, 0x94, 0x8d, 0xf9, 0x89, 0xd5, 0x8b, 0x49, 0x6c,
	0x59, 0xfb, 0xa4, 0xe9, 0xad, 0xa0, 0xcc, 0x82, 0xca, 0x9c, 0x7e, 0xd3, 0x62, 0x9c, 0x3a, 0x2b,
	0x48, 0xf0, 0x16, 0x45, 0xb8, 0x03, 0xc1, 0xfb, 0x20, 0xdf, 0xa6, 0x3c, 0x62, 0x81, 0x5f, 0x1c,
	0x91, 0xfc, 0xe5, 0x24, 0xb6, 0x90, 0xe2, 0x17, 0x83, 0x26, 0x13, 0xf2, 0xb0, 0xa8, 0xec, 0xd0,
	0x3a, 0x69, 0x79, 0x62, 0x05, 0xb5, 0x97, 0x2a, 0xcb, 0x95, 0x25, 0x84, 0x33, 0x0c, 0x7e, 0x01,
	0xa6, 0x23, 0xb5, 0x9b, 0x6d, 0x15, 0xb3, 0x62, 0xee, 0xf0, 0x46, 0x0e, 0xda, 0xbb, 0xdc, 0xe2,
	0x29, 0x6d, 0x5a, 0x93, 0x16, 0x78, 0x17, 0x98, 0x0e, 0x25, 0x8e, 0xc7, 0x7c, 0x5a, 0x1c, 0x2d,
	0x1b, 0xf3, 0x53, 0xab, 0x28, 0x89, 0xad, 0xb9, 0x01, 0xdb, 0x59, 0x5e, 0x42, 0xb8, 0xc3, 0xa0,
	0x9f, 0x46, 0x00, 0x7c, 0xd0, 0x24, 0xcc, 0x53, 0xfe, 0xf4, 0xab, 0x80, 0x55, 0x60, 0xb6, 0x22,
	0xca, 0x7d, 0xd2, 0xa4, 0x3a, 0x4a, 0xa7, 0x93, 0xd8, 0x9a, 0x51, 0x6e, 0x33, 0x0b, 0xc2, 0x1d,
	0x11, 0x2c, 0x01, 0x33, 0x24, 0x51, 0xf4, 0x6d, 0xc0, 0x1d, 0x15, 0x16, 0xdc, 0x79, 0x86, 0x2b,
	0x60, 0x92, 0xa6, 0x4b, 0x6c, 0xa7, 0x5b, 0xa7, 0x5c, 0x9f, 0xf6, 0x83, 0x24, 0xb6, 0x4e, 0xeb,
	0xb0, 0x77, 0x59, 0x11, 0x2e, 0xc8, 0xc7, 0x2d, 0xf9, 0x04, 0xd7, 0xc1, 0x68, 0x18, 0x70, 0xa1,
	0xcf, 0xb6, 0x94, 0xc4, 0xd6, 0xe2, 0x80, 0xb3, 0xdd, 0xb8, 0x7d, 0x0b, 0x95, 0x65, 0x92, 0xac,
	0xa0, 0x14, 0x43, 0x58, 0xd2, 0xb0, 0x02, 0x46, 0xeb, 0x3c, 0x68, 0x16, 0xc7, 0xe4, 0xca, 0xa5,
	0x24, 0xb6, 0xce, 0x6a, 0x95, 0x5c, 0x6b, 0x31, 0x08, 0xd3, 0x53, 0x13, 0x0f, 0x61, 0xa9, 0x43,
	0x3f, 0x98, 0xe0, 0xcc, 0x3a, 0x11, 0x64, 0x87, 0x44, 0xf4, 0x60, 0x60, 0x7e, 0x34, 0x40, 0xde,
	0x61, 0xc4, 0xa3, 0xb6, 0x4a, 0x9f, 0xe9, 0xda, 0xe5, 0x4a, 0xcf, 0x22, 0xa8, 0x64, 0xfc, 0xba,
	0x52, 0xaf, 0xae, 0x27, 0xb1, 0x75, 0xff, 0xe8, 0xde, 0xf5, 0x3e, 0x98, 0x3f, 0xff, 0x2c, 0x88,
	0x84, 0xcb, 0x69, 0xf4, 0xea, 0xc9, 0xfe, 0xd6, 0xf3, 0xcd, 0x57, 0x5b, 0xcf, 0x37, 0x99, 0xa0,
	0xd7, 0x17, 0xba, 0x8e, 0x57, 0x43, 0x38, 0x5b, 0x1c, 0xde, 0x04, 0xa3, 0x8d, 0x20, 0x12, 0x3a,
	0x07, 0xfb, 0xbc, 0x74, 0xed, 0x3c, 0x15, 0x22, 0x2c, 0xf5, 0xf0, 0x81, 0x0e, 0x68, 0x4e, 0x06,
	0x74, 0x39, 0x89, 0xad, 0x6b, 0x83, 0x02, 0xfa, 0xc9, 0xf5, 0x5a, 0xcf, 0x88, 0xde, 0xe9, 0x4a,
	0x90, 0x51, 0xb9, 0x85, 0xf3, 0x49, 0x6c, 0x9d, 0xd3, 0x4a, 0xe2, 0x85, 0x0d, 0xe2, 0xb7, 0x9a,
	0x8b, 0x59, 0x19, 0x75, 0xa7, 0xca, 0x9d, 0xae, 0x54, 0x19, 0x3b, 0x16, 0xda, 0xc9, 0xa4, 0xcf,
	0x80, 0xe9, 0xe8, 0xb0, 0x16, 0xc7, 0x25, 0x7a, 0x21, 0x89, 0xad, 0xf3, 0x1a, 0x15, 0xfb, 0x21,
	0x9d, 0x8f, 0x04, 0x67, 0xbe, 0xbb, 0xd0, 0x8d, 0x67, 0x08, 0xbc, 0x0b, 0xf2, 0x76, 0x83, 0xf0,
	0x88, 0x8a, 0x62, 0x5e, 0xd2, 0x97, 0x92, 0xd8, 0x2a, 0x0f, 0x38, 0x7e, 0x4b, 0xd4, 0x6f, 0x23,
	0x9c, 0x41, 0xf0, 0x26, 0xc8, 0xb5, 0x84, 0x5d, 0x34, 0xcb, 0xc6, 0xbc, 0x39, 0x94, 0x55, 0xf7,
	0x46, 0x0a, 0xc0, 0x7b, 0x20, 0xef, 0x05, 0xae, 0xcb, 0x7c, 0xb7, 0x38, 0x21, 0xd9, 0x8f, 0x92,
	0xd8, 0xba, 0x30, 0x80, 0xad, 0x13, 0x2f, 0xa2, 0x08, 0x67, 0x14, 0x7c, 0x04, 0x0a, 0x11, 0xf3,
	0xdd, 0x96, 0x47, 0x38, 0xfb, 0x8e, 0x16, 0xc1, 0x7f, 0x71, 0xd2, 0x4d, 0xc2, 0x97, 0x60, 0xba,
	0x49, 0xf6, 0xb6, 0x83, 0x90, 0xfa, 0xe9, 0xdd, 0xe2, 0x47, 0xc5, 0x82, 0xcc, 0x83, 0x6a, 0x12,
	0x5b, 0x1f, 0x2b, 0x5f, 0x07, 0xed, 0xbd, 0xaf, 0x10, 0x84, 0x27, 0x9b, 0x64, 0xef, 0x69, 0x48,
	0xfd, 0xb5, 0x54, 0x94, 0xb9, 0x65, 0x8e, 0x47, 0xb5, 0xdb, 0xc9, 0x5e, 0x6e, 0xdf, 0xd9, 0x07,
	0xb9, 0xdd, 0x70, 0x3c, 0xaa, 0xdc, 0x7e, 0x0f, 0xde, 0x4b, 0xd5, 0xdb, 0x29, 0xeb, 0xb1, 0x3a,
	0x15, 0xac, 0x49, 0x8b, 0x53, 0x65, 0x63, 0xbe, 0x50, 0x3b, 0x57, 0x51, 0x6d, 0xa4, 0x92, 0xb5,
	0x91, 0xca, 0xba, 0x2e, 0xd1, 0xd5, 0x5b, 0x49, 0x6c, 0x55, 0xd5, 0xa2, 0x47, 0xe8, 0xde, 0xeb,
	0x36, 0xd0, 0xeb, 0xdf, 0x2d, 0x03, 0xcf, 0xa4, 0xf2, 0x27, 0x64, 0x6f, 0x53, 0x8b, 0xd1, 0xcf,
	0x05, 0x60, 0x3e, 0xa4, 0x44, 0xb4, 0x38, 0x8d, 0xe0, 0xe7, 0x20, 0xdf, 0xa4, 0x82, 0x33, 0x3b,
	0x92, 0x85, 0x5f, 0xa8, 0x5d, 0xe9, 0x53, 0xf8, 0x19, 0x51, 0x79, 0xa2, 0xe4, 0x38, 0xe3, 0x52,
	0x17, 0x82, 0x13, 0x3b, 0xcd, 0x83, 0x91, 0xe3, 0xb9, 0x78, 0xa1, 0xe4, 0x38, 0xe3, 0xe0, 0x0d,
	0x90, 0x13, 0x5e, 0x24, 0xab, 0xb7, 0x50, 0xbb, 0x38, 0x14, 0xdf, 0xdc, 0xc2, 0xa9, 0x1e, 0x3e,
	0x02, 0x13, 0xba, 0x77, 0x06, 0x5c, 0xd6, 0x6b, 0xa1, 0xb6, 0x30, 0x0c, 0xfe, 0x32, 0x03, 0xf0,
	0x3b, 0x16, 0xde, 0x05, 0xe3, 0x3c, 0xb4, 0xbd, 0xc0, 0x95, 0xa5, 0x5b, 0xe8, 0x7b, 0xfb, 0x75,
	0xbc, 0x60, 0xa9, 0xc6, 0x9a, 0x82, 0xeb, 0xc0, 0x14, 0x9c, 0xf8, 0x51, 0xea, 0x61, 0x5c, 0x7a,
	0x98, 0x3f, 0x46, 0x0c, 0xa4, 0x1e, 0x77, 0xc8, 0xd2, 0x2f, 0x06, 0xc8, 0xeb, 0xe8, 0xa6, 0xc5,
	0x45, 0x7d, 0xb2, 0xe3, 0x51, 0x47, 0xbe, 0x97, 0xe3, 0x17, 0x97, 0xa6, 0x60, 0x11, 0xe4, 0x89,
	0xe3, 0x70, 0x1a, 0x45, 0xba, 0x73, 0x65, 0x8f, 0xf0, 0x6b, 0x30, 0x5d, 0xf7, 0x5a, 0x51, 0x63,
	0x9b, 0xf9, 0x82, 0xf2, 0x36, 0xf1, 0x64, 0xdc, 0x47, 0x57, 0x6f, 0x26, 0xb1, 0x55, 0x53, 0x2b,
	0x1c, 0xb4, 0xf7, 0x69, 0xb8, 0xea, 0x0f, 0xe1, 0x29, 0xa9, 0xde, 0xd0, 0x62, 0x79, 0x0a, 0xfd,
	0x82, 0xff, 0xc7, 0xa7, 0xf8, 0x7b, 0x04, 0xe4, 0x5e, 0x6c, 0x6e, 0x9d, 0xfc, 0x04, 0x4f, 0xc1,
	0x84, 0x4d, 0xb9, 0xd8, 0xae, 0x33, 0x8f, 0xea, 0xb6, 0x56, 0x4b, 0x62, 0xab, 0xa2, 0x4b, 0x39,
	0x33, 0x75, 0xda, 0x51, 0xbf, 0xeb, 0x3e, 0x55, 0x3e, 0x64, 0x1e, 0x85, 0x9b, 0xc0, 0xdc, 0xa5,
	0xfb, 0xca, 0x9f, 0x9a, 0x39, 0xba, 0xda, 0x5d, 0x66, 0x19, 0xe6, 0x2e, 0xbf, 0x4b, 0xf7, 0xa5,
	0xb7, 0x0d, 0x90, 0xb7, 0x89, 0x72, 0xa6, 0x1a, 0x5e, 0xd7, 0x30, 0xa2, 0x0d, 0xc3, 0x7c, 0x8d,
	0xdb, 0x44, 0xba, 0x5a, 0x03, 0x40, 0x0d, 0x3b, 0xb2, 0x7d, 0x8e, 0x1d, 0x1e, 0xfe, 0x7a, 0x46,
	0xeb, 0xca, 0xd5, 0x2b, 0x08, 0x77, 0x61, 0xa5, 0x4d, 0x30, 0xd1, 0xa9, 0xd0, 0x13, 0x07, 0xbf,
	0xb4, 0x01, 0xc6, 0x55, 0xa5, 0x9e, 0xdc, 0x15, 0x01, 0x66, 0x56, 0xb2, 0x27, 0x4f, 0x8a, 0xf7,
	0xc1, 0x98, 0x08, 0x42, 0x66, 0xeb, 0xa4, 0x56, 0x0f, 0xe8, 0x2f, 0x03, 0x98, 0x7a, 0xa0, 0x8f,
	0xe0, 0x6d, 0x90, 0x27, 0xb6, 0x1d, 0xb4, 0xf4, 0x40, 0x5f, 0xa8, 0xcd, 0xf5, 0xb9, 0x51, 0x34,
	0x81, 0x33, 0x79, 0x4a, 0xba, 0x9c, 0x52, 0x41, 0xb9, 0xbe, 0x8f, 0x87, 0x92, 0x5a, 0x9e, 0x92,
	0x72, 0x72, 0xd4, 0xd3, 0xec, 0x31, 0x48, 0x2d, 0x87, 0x2b, 0xc0, 0xe4, 0xd4, 0x0e, 0xb8, 0x43,
	0xb3, 0x8b, 0x78, 0x18, 0xda, 0xd1, 0xa3, 0x37, 0x23, 0x60, 0xea, 0xe0, 0x38, 0xfa, 0xb8, 0x6b,
	0x20, 0x52, 0x1b, 0x59, 0x1c, 0x32, 0x8e, 0x1e, 0xe0, 0xbb, 0x66, 0xa3, 0x7b, 0x60, 0x4c, 0x6e,
	0x71, 0x48, 0x77, 0x38, 0xfa, 0xad, 0x80, 0x15, 0x07, 0x3f, 0x05, 0x66, 0x5d, 0x5f, 0xd9, 0xba,
	0x37, 0x58, 0x43, 0x6e, 0x76, 0xdc, 0x01, 0x52, 0x58, 0x7f, 0xd7, 0x44, 0xba, 0x2d, 0x58, 0x83,
	0xa3, 0x12, 0xe1, 0x0e, 0xb0, 0x92, 0xfb, 0x67, 0xd5, 0xb8, 0xfa, 0x18, 0xcc, 0x1c, 0x9a, 0xb8,
	0xe1, 0x0c, 0x28, 0xbc, 0xf4, 0xa3, 0x90, 0xda, 0xac, 0xce, 0xa8, 0x33, 0x7b, 0x0a, 0x4e, 0x02,
	0x33, 0x1b, 0xb2, 0x67, 0x0d, 0x38, 0x01, 0xc6, 0xe4, 0xa4, 0x3d, 0x3b, 0x02, 0x0b, 0x20, 0xaf,
	0xc7, 0xed, 0xd9, 0x5c, 0xed, 0x8d, 0x91, 0x45, 0x39, 0xfb, 0x66, 0x5c, 0x03, 0xb9, 0x47, 0x54,
	0xc0, 0xb3, 0x47, 0x66, 0x8e, 0x07, 0x69, 0xf6, 0x96, 0x2e, 0xf5, 0xd9, 0xea, 0xc1, 0x57, 0xb5,
	0x06, 0x72, 0x5b, 0x54, 0xc0, 0x63, 0x89, 0x4b, 0x7d, 0x96, 0x5a, 0xf5, 0x7f, 0x7d, 0x3b, 0x67,
	0xfc, 0xf6, 0x76, 0xce, 0xf8, 0xe3, 0xed, 0x9c, 0xf1, 0xfa, 0xcf, 0xb9, 0x53, 0xa0, 0xf7, 0x27,
	0xf8, 0x33, 0xe3, 0xab, 0x35, 0x97, 0x89, 0x46, 0x6b, 0xa7, 0x62, 0x07, 0xcd, 0xea, 0x5e, 0xd3,
	0xdb, 0x65, 0xbe, 0x5b, 0x75, 0x79, 0x68, 0x5f, 0x8b, 0x04, 0xe1, 0x82, 0xf2, 0x6b, 0xbb, 0x4c,
	0x54, 0x07, 0x7e, 0xe4, 0xb7, 0x97, 0x77, 0xc6, 0xa5, 0xe5, 0xfa, 0xbf, 0x01, 0x00, 0x00, 0xff,
	0xff, 0x15, 0xc6, 0x85, 0xab, 0x0e, 0x10, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// ConfigServiceClient is the client API for ConfigService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type ConfigServiceClient interface {
	Get(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Configuration, error)
	Set(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*empty.Empty, error)
}

type configServiceClient struct {
	cc *grpc.ClientConn
}

func NewConfigServiceClient(cc *grpc.ClientConn) ConfigServiceClient {
	return &configServiceClient{cc}
}

func (c *configServiceClient) Get(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*Configuration, error) {
	out := new(Configuration)
	err := c.cc.Invoke(ctx, "/mkit.shared.config.v1.ConfigService/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *configServiceClient) Set(ctx context.Context, in *Configuration, opts ...grpc.CallOption) (*empty.Empty, error) {
	out := new(empty.Empty)
	err := c.cc.Invoke(ctx, "/mkit.shared.config.v1.ConfigService/Set", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ConfigServiceServer is the server API for ConfigService service.
type ConfigServiceServer interface {
	Get(context.Context, *empty.Empty) (*Configuration, error)
	Set(context.Context, *Configuration) (*empty.Empty, error)
}

// UnimplementedConfigServiceServer can be embedded to have forward compatible implementations.
type UnimplementedConfigServiceServer struct {
}

func (*UnimplementedConfigServiceServer) Get(ctx context.Context, req *empty.Empty) (*Configuration, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (*UnimplementedConfigServiceServer) Set(ctx context.Context, req *Configuration) (*empty.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Set not implemented")
}

func RegisterConfigServiceServer(s *grpc.Server, srv ConfigServiceServer) {
	s.RegisterService(&_ConfigService_serviceDesc, srv)
}

func _ConfigService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mkit.shared.config.v1.ConfigService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Get(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ConfigService_Set_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Configuration)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ConfigServiceServer).Set(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/mkit.shared.config.v1.ConfigService/Set",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ConfigServiceServer).Set(ctx, req.(*Configuration))
	}
	return interceptor(ctx, in, info, handler)
}

var _ConfigService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "mkit.shared.config.v1.ConfigService",
	HandlerType: (*ConfigServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Get",
			Handler:    _ConfigService_Get_Handler,
		},
		{
			MethodName: "Set",
			Handler:    _ConfigService_Set_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "shared/proto/config/v1/config.proto",
}

func (m *Service) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Service) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Service) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Deadline != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Deadline))
		i--
		dAtA[i] = 0x20
	}
	if len(m.ServiceConfig) > 0 {
		i -= len(m.ServiceConfig)
		copy(dAtA[i:], m.ServiceConfig)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.ServiceConfig)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Version) > 0 {
		i -= len(m.Version)
		copy(dAtA[i:], m.Version)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Version)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Endpoint) > 0 {
		i -= len(m.Endpoint)
		copy(dAtA[i:], m.Endpoint)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Endpoint)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *EmailConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *EmailConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *EmailConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.From) > 0 {
		i -= len(m.From)
		copy(dAtA[i:], m.From)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.From)))
		i--
		dAtA[i] = 0x2a
	}
	if m.Port != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x20
	}
	if len(m.EmailServer) > 0 {
		i -= len(m.EmailServer)
		copy(dAtA[i:], m.EmailServer)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.EmailServer)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *DatabaseConfiguration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *DatabaseConfiguration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *DatabaseConfiguration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.ConnMaxLifetime != nil {
		n1, err1 := github_com_gogo_protobuf_types.StdDurationMarshalTo(*m.ConnMaxLifetime, dAtA[i-github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ConnMaxLifetime):])
		if err1 != nil {
			return 0, err1
		}
		i -= n1
		i = encodeVarintConfig(dAtA, i, uint64(n1))
		i--
		dAtA[i] = 0x6a
	}
	if m.MaxIdleConns != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MaxIdleConns))
		i--
		dAtA[i] = 0x60
	}
	if m.MaxOpenConns != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.MaxOpenConns))
		i--
		dAtA[i] = 0x58
	}
	if m.Singularize {
		i--
		if m.Singularize {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x50
	}
	if m.Logging {
		i--
		if m.Logging {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x48
	}
	if m.Utc {
		i--
		if m.Utc {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x40
	}
	if len(m.Charset) > 0 {
		i -= len(m.Charset)
		copy(dAtA[i:], m.Charset)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Charset)))
		i--
		dAtA[i] = 0x3a
	}
	if len(m.Database) > 0 {
		i -= len(m.Database)
		copy(dAtA[i:], m.Database)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Database)))
		i--
		dAtA[i] = 0x32
	}
	if len(m.Password) > 0 {
		i -= len(m.Password)
		copy(dAtA[i:], m.Password)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Password)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Username) > 0 {
		i -= len(m.Username)
		copy(dAtA[i:], m.Username)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Username)))
		i--
		dAtA[i] = 0x22
	}
	if m.Port != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Port))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Host) > 0 {
		i -= len(m.Host)
		copy(dAtA[i:], m.Host)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Host)))
		i--
		dAtA[i] = 0x12
	}
	if m.Dialect != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.Dialect))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Features) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Features) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Features) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Translog != nil {
		{
			size, err := m.Translog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Rpclog != nil {
		{
			size, err := m.Rpclog.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Validator != nil {
		{
			size, err := m.Validator.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Tls != nil {
		{
			size, err := m.Tls.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Tracing != nil {
		{
			size, err := m.Tracing.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Metrics != nil {
		{
			size, err := m.Metrics.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Features_Metrics) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Features_Metrics) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Features_Metrics) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FlushInterval != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.FlushInterval))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Features_Tracing) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Features_Tracing) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Features_Tracing) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.FlushInterval != 0 {
		i = encodeVarintConfig(dAtA, i, uint64(m.FlushInterval))
		i--
		dAtA[i] = 0x18
	}
	if len(m.Address) > 0 {
		i -= len(m.Address)
		copy(dAtA[i:], m.Address)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Address)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Features_TLS) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Features_TLS) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Features_TLS) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Servername) > 0 {
		i -= len(m.Servername)
		copy(dAtA[i:], m.Servername)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Servername)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.CaFile) > 0 {
		i -= len(m.CaFile)
		copy(dAtA[i:], m.CaFile)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.CaFile)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.KeyFile) > 0 {
		i -= len(m.KeyFile)
		copy(dAtA[i:], m.KeyFile)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.KeyFile)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.CertFile) > 0 {
		i -= len(m.CertFile)
		copy(dAtA[i:], m.CertFile)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.CertFile)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Features_Validator) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Features_Validator) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Features_Validator) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Features_Rpclog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Features_Rpclog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Features_Rpclog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Features_Translog) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Features_Translog) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Features_Translog) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if len(m.Topic) > 0 {
		i -= len(m.Topic)
		copy(dAtA[i:], m.Topic)
		i = encodeVarintConfig(dAtA, i, uint64(len(m.Topic)))
		i--
		dAtA[i] = 0x12
	}
	if m.Enabled {
		i--
		if m.Enabled {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *Services) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Services) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Services) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Recorder != nil {
		{
			size, err := m.Recorder.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Emailer != nil {
		{
			size, err := m.Emailer.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if m.Greeter != nil {
		{
			size, err := m.Greeter.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if m.Account != nil {
		{
			size, err := m.Account.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *Configuration) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Configuration) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Configuration) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.XXX_unrecognized != nil {
		i -= len(m.XXX_unrecognized)
		copy(dAtA[i:], m.XXX_unrecognized)
	}
	if m.Services != nil {
		{
			size, err := m.Services.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x32
	}
	if m.Features != nil {
		{
			size, err := m.Features.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x2a
	}
	if m.Email != nil {
		{
			size, err := m.Email.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x22
	}
	if m.Database != nil {
		{
			size, err := m.Database.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintConfig(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	return len(dAtA) - i, nil
}

func encodeVarintConfig(dAtA []byte, offset int, v uint64) int {
	offset -= sovConfig(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Service) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Endpoint)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.ServiceConfig)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Deadline != 0 {
		n += 1 + sovConfig(uint64(m.Deadline))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *EmailConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.EmailServer)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovConfig(uint64(m.Port))
	}
	l = len(m.From)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *DatabaseConfiguration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Dialect != 0 {
		n += 1 + sovConfig(uint64(m.Dialect))
	}
	l = len(m.Host)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Port != 0 {
		n += 1 + sovConfig(uint64(m.Port))
	}
	l = len(m.Username)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Password)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Database)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Charset)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Utc {
		n += 2
	}
	if m.Logging {
		n += 2
	}
	if m.Singularize {
		n += 2
	}
	if m.MaxOpenConns != 0 {
		n += 1 + sovConfig(uint64(m.MaxOpenConns))
	}
	if m.MaxIdleConns != 0 {
		n += 1 + sovConfig(uint64(m.MaxIdleConns))
	}
	if m.ConnMaxLifetime != nil {
		l = github_com_gogo_protobuf_types.SizeOfStdDuration(*m.ConnMaxLifetime)
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Features) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Metrics != nil {
		l = m.Metrics.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Tracing != nil {
		l = m.Tracing.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Tls != nil {
		l = m.Tls.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Validator != nil {
		l = m.Validator.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Rpclog != nil {
		l = m.Rpclog.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Translog != nil {
		l = m.Translog.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Features_Metrics) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.FlushInterval != 0 {
		n += 1 + sovConfig(uint64(m.FlushInterval))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Features_Tracing) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Address)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.FlushInterval != 0 {
		n += 1 + sovConfig(uint64(m.FlushInterval))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Features_TLS) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.CertFile)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.KeyFile)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.CaFile)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	l = len(m.Servername)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Features_Validator) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Features_Rpclog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Features_Translog) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Enabled {
		n += 2
	}
	l = len(m.Topic)
	if l > 0 {
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Services) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Account != nil {
		l = m.Account.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Greeter != nil {
		l = m.Greeter.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Emailer != nil {
		l = m.Emailer.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Recorder != nil {
		l = m.Recorder.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func (m *Configuration) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Database != nil {
		l = m.Database.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Email != nil {
		l = m.Email.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Features != nil {
		l = m.Features.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.Services != nil {
		l = m.Services.Size()
		n += 1 + l + sovConfig(uint64(l))
	}
	if m.XXX_unrecognized != nil {
		n += len(m.XXX_unrecognized)
	}
	return n
}

func sovConfig(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozConfig(x uint64) (n int) {
	return sovConfig(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Service) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Service: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Service: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Endpoint", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Endpoint = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ServiceConfig", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ServiceConfig = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Deadline", wireType)
			}
			m.Deadline = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Deadline |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *EmailConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: EmailConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: EmailConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field EmailServer", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.EmailServer = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field From", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.From = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *DatabaseConfiguration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: DatabaseConfiguration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: DatabaseConfiguration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dialect", wireType)
			}
			m.Dialect = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Dialect |= DatabaseDialect(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Host", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Host = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Port", wireType)
			}
			m.Port = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Port |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Username", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Username = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Password", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Password = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Database = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Charset", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Charset = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Utc", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Utc = bool(v != 0)
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logging", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Logging = bool(v != 0)
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Singularize", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Singularize = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxOpenConns", wireType)
			}
			m.MaxOpenConns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxOpenConns |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field MaxIdleConns", wireType)
			}
			m.MaxIdleConns = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.MaxIdleConns |= uint32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ConnMaxLifetime", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.ConnMaxLifetime == nil {
				m.ConnMaxLifetime = new(time.Duration)
			}
			if err := github_com_gogo_protobuf_types.StdDurationUnmarshal(m.ConnMaxLifetime, dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Features) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Features: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Features: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metrics", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Metrics == nil {
				m.Metrics = &Features_Metrics{}
			}
			if err := m.Metrics.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tracing", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tracing == nil {
				m.Tracing = &Features_Tracing{}
			}
			if err := m.Tracing.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Tls", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Tls == nil {
				m.Tls = &Features_TLS{}
			}
			if err := m.Tls.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Validator", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Validator == nil {
				m.Validator = &Features_Validator{}
			}
			if err := m.Validator.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Rpclog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Rpclog == nil {
				m.Rpclog = &Features_Rpclog{}
			}
			if err := m.Rpclog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Translog", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Translog == nil {
				m.Translog = &Features_Translog{}
			}
			if err := m.Translog.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Features_Metrics) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Metrics: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Metrics: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushInterval", wireType)
			}
			m.FlushInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlushInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Features_Tracing) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Tracing: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Tracing: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Address = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field FlushInterval", wireType)
			}
			m.FlushInterval = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.FlushInterval |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Features_TLS) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TLS: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TLS: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CertFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CertFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CaFile", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CaFile = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Servername", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Servername = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Features_Validator) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Validator: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Validator: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Features_Rpclog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Rpclog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Rpclog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Features_Translog) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Translog: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Translog: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Enabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Enabled = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Topic", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Topic = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Services) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Services: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Services: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Account", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Account == nil {
				m.Account = &Service{}
			}
			if err := m.Account.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Greeter", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Greeter == nil {
				m.Greeter = &Service{}
			}
			if err := m.Greeter.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Emailer", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Emailer == nil {
				m.Emailer = &Service{}
			}
			if err := m.Emailer.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Recorder", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Recorder == nil {
				m.Recorder = &Service{}
			}
			if err := m.Recorder.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Configuration) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Configuration: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Configuration: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Database", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Database == nil {
				m.Database = &DatabaseConfiguration{}
			}
			if err := m.Database.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Email == nil {
				m.Email = &EmailConfiguration{}
			}
			if err := m.Email.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Features", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Features == nil {
				m.Features = &Features{}
			}
			if err := m.Features.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Services", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthConfig
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthConfig
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Services == nil {
				m.Services = &Services{}
			}
			if err := m.Services.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipConfig(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) < 0 {
				return ErrInvalidLengthConfig
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			m.XXX_unrecognized = append(m.XXX_unrecognized, dAtA[iNdEx:iNdEx+skippy]...)
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipConfig(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowConfig
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowConfig
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthConfig
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupConfig
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthConfig
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthConfig        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowConfig          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupConfig = fmt.Errorf("proto: unexpected end of group")
)
